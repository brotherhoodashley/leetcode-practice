<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="BranchesTreeState">
    <expand />
    <select>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="LOCAL_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
    </select>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7dbb84ff-cb70-4f33-84ac-c2138746d980" name="Default Changelist" comment="Add comment">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/alternate/RotationGroups.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/alternate/RotationGroups.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="JUnit5 Test Class" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="PUSH_TAGS">
      <GitPushTagMode />
    </option>
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="GithubPullRequestsUISettings">
    <option name="hiddenUrls">
      <set>
        <option value="https://github.com/snehasishroy/leetcode-practice.git" />
      </set>
    </option>
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="vmOptionsForImporter" value="-Xmx768m" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="ProjectId" id="1OYjUozR2wA5XfxN4lSupdXEdA9" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showMembers" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="Downloaded.Files.Path.Enabled" value="false" />
    <property name="Repository.Attach.Annotations" value="true" />
    <property name="Repository.Attach.JavaDocs" value="true" />
    <property name="Repository.Attach.Sources" value="true" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="ToolWindowRun.ShowToolbar" value="false" />
    <property name="com.intellij.ide.scratch.LRUPopupBuilder$1/New Scratch File" value="JAVA" />
    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary" value="JUnit5" />
    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5" value="" />
    <property name="extract.method.default.visibility" value="private" />
    <property name="last.edited.regexp" value="abc\ntasd\n" />
    <property name="last_directory_selection" value="$PROJECT_DIR$/src/main/java/common" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="preferences.editor" />
  </component>
  <component name="RecentsManager">
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="" />
      <recent name="alternate" />
      <recent name="common" />
    </key>
    <key name="MoveInnerDialog.RECENTS_KEY">
      <recent name="common" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="" />
    </key>
  </component>
  <component name="RunManager" selected="Application.DiceRollSimulation">
    <configuration name="BeautifulArrangement" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="BeautifulArrangement" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DiceRollSimulation" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="DiceRollSimulation" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DivideChocolates" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="DivideChocolates" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="JumpGame4" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="JumpGame4" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Unnamed" type="JUnit" factoryName="JUnit" nameIsGenerated="true">
      <module name="leetcode-practice" />
      <option name="MAIN_CLASS_NAME" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="class" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Scratch" type="Java Scratch" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Scratch" />
      <option name="SCRATCH_FILE_URL" value="file://$APPLICATION_CONFIG_DIR$/scratches/scratch.java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Application.DivideChocolates" />
      <item itemvalue="Application.JumpGame4" />
      <item itemvalue="Application.BeautifulArrangement" />
      <item itemvalue="Java Scratch.Scratch" />
      <item itemvalue="JUnit.Unnamed" />
      <item itemvalue="Application.DiceRollSimulation" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Application.DiceRollSimulation" />
        <item itemvalue="Application.BeautifulArrangement" />
        <item itemvalue="Application.JumpGame4" />
        <item itemvalue="Java Scratch.Scratch" />
        <item itemvalue="Application.DivideChocolates" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="project-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="7dbb84ff-cb70-4f33-84ac-c2138746d980" name="Default Changelist" comment="" />
      <created>1561288929632</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1561288929632</updated>
    </task>
    <task id="LOCAL-00679" summary="Simplify code by using Math.min() instead">
      <created>1609701631705</created>
      <option name="number" value="00679" />
      <option name="presentableId" value="LOCAL-00679" />
      <option name="project" value="LOCAL" />
      <updated>1609701631705</updated>
    </task>
    <task id="LOCAL-00680" summary="Add gotchas in count distinct subsequences">
      <created>1609702580836</created>
      <option name="number" value="00680" />
      <option name="presentableId" value="LOCAL-00680" />
      <option name="project" value="LOCAL" />
      <updated>1609702580836</updated>
    </task>
    <task id="LOCAL-00681" summary="Simplify topological sort by using enums as states instead of maintaining two different arrays">
      <created>1609704581284</created>
      <option name="number" value="00681" />
      <option name="presentableId" value="LOCAL-00681" />
      <option name="project" value="LOCAL" />
      <updated>1609704581284</updated>
    </task>
    <task id="LOCAL-00682" summary="Solve medium remove all adjacent duplicate characters in string which are of k length using stack.">
      <created>1609707880372</created>
      <option name="number" value="00682" />
      <option name="presentableId" value="LOCAL-00682" />
      <option name="project" value="LOCAL" />
      <updated>1609707880372</updated>
    </task>
    <task id="LOCAL-00683" summary="Simplify code by just considering whether we can find a subset with targetSum = totalSum/2. Each element has two options, either be part of the subset or be excluded from it. Try both the options.">
      <created>1609801021438</created>
      <option name="number" value="00683" />
      <option name="presentableId" value="LOCAL-00683" />
      <option name="project" value="LOCAL" />
      <updated>1609801021438</updated>
    </task>
    <task id="LOCAL-00684" summary="Solve medium remove duplicates from a sorted linked list using dummy node">
      <created>1609859229894</created>
      <option name="number" value="00684" />
      <option name="presentableId" value="LOCAL-00684" />
      <option name="project" value="LOCAL" />
      <updated>1609859229894</updated>
    </task>
    <task id="LOCAL-00685" summary="Solve medium design data structure to represent browser history that supports going back and forward k steps in history using arraylist and ensuring that we overwrite the index, if we are at inner indices instead of creating a new list and appending to the end of it. &#10;This smart overwrite logic ensures we work in O(1) time for all operations">
      <created>1609860130126</created>
      <option name="number" value="00685" />
      <option name="presentableId" value="LOCAL-00685" />
      <option name="project" value="LOCAL" />
      <updated>1609860130126</updated>
    </task>
    <task id="LOCAL-00686" summary="Solve easy find out how many person's can be satisfied from given set of cookies if a person needs atleast a cookie of specific size to get satisfied using greedy by sorting the size of cookies and greed of each persons.">
      <created>1609860567797</created>
      <option name="number" value="00686" />
      <option name="presentableId" value="LOCAL-00686" />
      <option name="project" value="LOCAL" />
      <updated>1609860567797</updated>
    </task>
    <task id="LOCAL-00687" summary="Solve hard and extremely tricky rearrange a string such that same characters are placed at k distance apart using greedy approach. &#10;Couple of tricks were used&#10;1. Use PQ based on decreasing frequency as the characters that occurs the most should be placed first&#10;2. To ensure that we don't place characters early (&lt;k distance), use a queue for simulating characters that are waiting. Add the head of the queue back to PQ only if queue.size()==k">
      <created>1609868454040</created>
      <option name="number" value="00687" />
      <option name="presentableId" value="LOCAL-00687" />
      <option name="project" value="LOCAL" />
      <updated>1609868454040</updated>
    </task>
    <task id="LOCAL-00688" summary="Solve hard and extremely tricky design a data structure that supports adding ranges and removing ranges using ordered map. Each portion itself is a medium problem of its own ! &#10;To support addRange() we need to merge overlapping intervals by removing all overlapping intervals and at the end introducing the final merged range.&#10;To support removeRange() we can add the range to insert a merged interval and then remove the entire interval only to introduce the slices that needs not to removed ie. the portion on the left and right of target range. Very tricky operation but it simplifies the code a lot">
      <created>1609880709275</created>
      <option name="number" value="00688" />
      <option name="presentableId" value="LOCAL-00688" />
      <option name="project" value="LOCAL" />
      <updated>1609880709275</updated>
    </task>
    <task id="LOCAL-00689" summary="Solve hard and extremely tricky find critical connections in a network using tarzan's algorithm for detecting back edges. &#10;&#10;Keep track of the time a node was first visited, if it's neighbourTime &gt; firstVisitedTime, we have a critical connection. Meanwhile if a node is connected to a node with smaller time, this means there is another path to this node hence current path isn't critical. Keep updating the time of an index by taking the min of neighbourTime and curNodeTime">
      <created>1610026466170</created>
      <option name="number" value="00689" />
      <option name="presentableId" value="LOCAL-00689" />
      <option name="project" value="LOCAL" />
      <updated>1610026466170</updated>
    </task>
    <task id="LOCAL-00690" summary="Solve medium given a set of rooms where each room has a set of keys, find whether it's possible to visit all rooms using UnionFind. A bit optimization trick to avoid visited array was to use a dummy room to perform union with. &#10;&#10;Reminder to self, union find can be applied only on undirected graphs and this problem isn't exactly an undirected graph.">
      <created>1610028489550</created>
      <option name="number" value="00690" />
      <option name="presentableId" value="LOCAL-00690" />
      <option name="project" value="LOCAL" />
      <updated>1610028489550</updated>
    </task>
    <task id="LOCAL-00691" summary="Solve medium and a bit tricky find the number of closed islands i.e find the 0's that are completely surrounded by 1's by inverting the lookup criteria. We know the cells at the border are definitely not surrounded, so we mark all the cells connected to the border water cells. The water cells left are closed.">
      <created>1610035845454</created>
      <option name="number" value="00691" />
      <option name="presentableId" value="LOCAL-00691" />
      <option name="project" value="LOCAL" />
      <updated>1610035845454</updated>
    </task>
    <task id="LOCAL-00692" summary="Solve medium and extremely tricky coloring game where first player has chosen a node and we have to choose a marker node. Now after this each player can only choose nodes that are directly connected to the nodes of same color.&#10;&#10;Trick was to realize that best option for player2 would be to choose any of the 3 connected nodes to first players chosen node i.e left child, right child or it's parent. Doing so will block first player to choose any of it's subtree.">
      <created>1610052519772</created>
      <option name="number" value="00692" />
      <option name="presentableId" value="LOCAL-00692" />
      <option name="project" value="LOCAL" />
      <updated>1610052519772</updated>
    </task>
    <task id="LOCAL-00693" summary="Solve medium and extremely tricky to do it in O(1) space complexity, given nodes of a n-ary tree, find the root node. Simple solution is to use a visited set to keep track of nodes that were visited because they are a children of some other node. Root node will never be visited because it's not a children of any node. But this approach requires additional space.&#10;&#10;In order to reduce space complexity we have to leverage the insight that all other nodes except root node are visited twice. So if we perform xor on the values, only root node will remain.">
      <created>1610116705144</created>
      <option name="number" value="00693" />
      <option name="presentableId" value="LOCAL-00693" />
      <option name="project" value="LOCAL" />
      <updated>1610116705144</updated>
    </task>
    <task id="LOCAL-00694" summary="Solve easy find whether two string arrays result in same string upon concatenation or not using O(1) space via two pointers approach.&#10;Keep four pointers, 2 for word index and 2 for char index inside word. Increment the word index pointer if char index has reached the end of the current word.&#10;At the end check if all the words have been verified in both the arrays.">
      <created>1610117820672</created>
      <option name="number" value="00694" />
      <option name="presentableId" value="LOCAL-00694" />
      <option name="project" value="LOCAL" />
      <updated>1610117820672</updated>
    </task>
    <task id="LOCAL-00695" summary="Add constraints in the problem statement along with explanation of not using the curSum as a key in memoization because the numbers chosen so far can uniquely represent the dp state. We are not restricting ourselves to an index">
      <created>1610123328268</created>
      <option name="number" value="00695" />
      <option name="presentableId" value="LOCAL-00695" />
      <option name="project" value="LOCAL" />
      <updated>1610123328268</updated>
    </task>
    <task id="LOCAL-00696" summary="Add approach and related line sweep problems">
      <created>1610124652385</created>
      <option name="number" value="00696" />
      <option name="presentableId" value="LOCAL-00696" />
      <option name="project" value="LOCAL" />
      <updated>1610124652385</updated>
    </task>
    <task id="LOCAL-00697" summary="Add clarification on why DP doesn't work for this problem because this problem has cycles in recurrence relation">
      <created>1610125983097</created>
      <option name="number" value="00697" />
      <option name="presentableId" value="LOCAL-00697" />
      <option name="project" value="LOCAL" />
      <updated>1610125983097</updated>
    </task>
    <task id="LOCAL-00698" summary="Update comment">
      <created>1610127869287</created>
      <option name="number" value="00698" />
      <option name="presentableId" value="LOCAL-00698" />
      <option name="project" value="LOCAL" />
      <updated>1610127869287</updated>
    </task>
    <task id="LOCAL-00699" summary="Add comment for evaluation future nested string expressions">
      <created>1610128554122</created>
      <option name="number" value="00699" />
      <option name="presentableId" value="LOCAL-00699" />
      <option name="project" value="LOCAL" />
      <updated>1610128554122</updated>
    </task>
    <task id="LOCAL-00700" summary="Add approach and simplify code by removing visited arrays because the given graph is a DAG">
      <created>1610129922200</created>
      <option name="number" value="00700" />
      <option name="presentableId" value="LOCAL-00700" />
      <option name="project" value="LOCAL" />
      <updated>1610129922200</updated>
    </task>
    <task id="LOCAL-00701" summary="Simplify code by introducing enum states instead of two boolean[] array; visited and toDo">
      <created>1610144283072</created>
      <option name="number" value="00701" />
      <option name="presentableId" value="LOCAL-00701" />
      <option name="project" value="LOCAL" />
      <updated>1610144283072</updated>
    </task>
    <task id="LOCAL-00702" summary="Simplify code by removing redundant null checks">
      <created>1610144909010</created>
      <option name="number" value="00702" />
      <option name="presentableId" value="LOCAL-00702" />
      <option name="project" value="LOCAL" />
      <updated>1610144909010</updated>
    </task>
    <task id="LOCAL-00703" summary="Solve medium and a bit tricky, merge all emails associated with the same person by performing union find on strings. &#10;&#10;Union find on strings is a bit tricky as we need to either have a unique identifier associated with each string, here we can use the index as an id, if we see an email is already associated with another index, we perform union on those two indices.">
      <created>1610202217576</created>
      <option name="number" value="00703" />
      <option name="presentableId" value="LOCAL-00703" />
      <option name="project" value="LOCAL" />
      <updated>1610202217577</updated>
    </task>
    <task id="LOCAL-00704" summary="Add comment to explain the additional code in union() operation on strings">
      <created>1610202666791</created>
      <option name="number" value="00704" />
      <option name="presentableId" value="LOCAL-00704" />
      <option name="project" value="LOCAL" />
      <updated>1610202666791</updated>
    </task>
    <task id="LOCAL-00705" summary="Add clarifications on handling duplicate elements">
      <created>1610203367873</created>
      <option name="number" value="00705" />
      <option name="presentableId" value="LOCAL-00705" />
      <option name="project" value="LOCAL" />
      <updated>1610203367874</updated>
    </task>
    <task id="LOCAL-00706" summary="Add comments and time complexity in MostStonesRemovedWithSameRowOrSameColumn">
      <created>1610205554155</created>
      <option name="number" value="00706" />
      <option name="presentableId" value="LOCAL-00706" />
      <option name="project" value="LOCAL" />
      <updated>1610205554156</updated>
    </task>
    <task id="LOCAL-00707" summary="Update comment regarding handling of parallel edges">
      <created>1610207272603</created>
      <option name="number" value="00707" />
      <option name="presentableId" value="LOCAL-00707" />
      <option name="project" value="LOCAL" />
      <updated>1610207272603</updated>
    </task>
    <task id="LOCAL-00708" summary="Add comment to solve the problem in another way">
      <created>1610208437237</created>
      <option name="number" value="00708" />
      <option name="presentableId" value="LOCAL-00708" />
      <option name="project" value="LOCAL" />
      <updated>1610208437237</updated>
    </task>
    <task id="LOCAL-00709" summary="Solve hard and extremely tricky represent data stream as disjoint intervals by merging consecutive integers ie. 1,2,3,4 are merged to form [1,4] using treeMap&#10;&#10;Learnings -- To handle interval related problem, always ensure that there is no overlapping interval before or after an operation, so whenever do something, remove overlapped intervals and introduce a merged interval">
      <created>1610212671533</created>
      <option name="number" value="00709" />
      <option name="presentableId" value="LOCAL-00709" />
      <option name="project" value="LOCAL" />
      <updated>1610212671533</updated>
    </task>
    <task id="LOCAL-00710" summary="Solve hard and extremely tricky find the min no of flips required so that array does not have any 0. Whenever flip is performed, we have to flip k consecutive bits. Need to use greedy ie. whenever we see a 0, flip k consecutive bits. If we actually flip it, time complexity would be o(nk), instead we perform virtual flips i.e we keep track of indices till which we have to perform flips and size of queue would indicate the no of flips performed. If A[i] == 1 and we have performed even bits, A[i] is still 1, so skip it.">
      <created>1610224169591</created>
      <option name="number" value="00710" />
      <option name="presentableId" value="LOCAL-00710" />
      <option name="project" value="LOCAL" />
      <updated>1610224169592</updated>
    </task>
    <task id="LOCAL-00711" summary="Add problem statement and approach for counting prime numbers &lt; n using sieve of eratosthenes">
      <created>1610225971292</created>
      <option name="number" value="00711" />
      <option name="presentableId" value="LOCAL-00711" />
      <option name="project" value="LOCAL" />
      <updated>1610225971292</updated>
    </task>
    <task id="LOCAL-00712" summary="Solve medium math related problem, find the count of numbers with odd no of divisors by counting perfect squares">
      <created>1610226299442</created>
      <option name="number" value="00712" />
      <option name="presentableId" value="LOCAL-00712" />
      <option name="project" value="LOCAL" />
      <updated>1610226299442</updated>
    </task>
    <task id="LOCAL-00713" summary="Solve hard and extremely tricky count the no of ways in which we can place P,A,L to generate strings of N length such that we can have at most 1 A and at most 2 consecutive L in the generated string using recursion with memoization&#10;&#10;Learnings -- Figure out the information required at each state, this will help in figuring the parameters required in recursion. Here we need to know the count of P, A and consecutive L present at each state">
      <created>1610232934993</created>
      <option name="number" value="00713" />
      <option name="presentableId" value="LOCAL-00713" />
      <option name="project" value="LOCAL" />
      <updated>1610232934993</updated>
    </task>
    <task id="LOCAL-00714" summary="Add gotcha in hard and extremely tricky problem in counting subsequences that matches a given target string">
      <created>1610294517355</created>
      <option name="number" value="00714" />
      <option name="presentableId" value="LOCAL-00714" />
      <option name="project" value="LOCAL" />
      <updated>1610294517355</updated>
    </task>
    <task id="LOCAL-00715" summary="Solve count distinct subsequences in a string that matches target string using binary search + memoization. In my initial attempt, I thought my solution isn't memoizable but I proved myself wrong ! What a day !">
      <created>1610295833004</created>
      <option name="number" value="00715" />
      <option name="presentableId" value="LOCAL-00715" />
      <option name="project" value="LOCAL" />
      <updated>1610295833004</updated>
    </task>
    <task id="LOCAL-00716" summary="Simplify code by removing if/else check during removal of key from hashmap">
      <created>1610297472757</created>
      <option name="number" value="00716" />
      <option name="presentableId" value="LOCAL-00716" />
      <option name="project" value="LOCAL" />
      <updated>1610297472757</updated>
    </task>
    <task id="LOCAL-00717" summary="Fix typo">
      <created>1610308799198</created>
      <option name="number" value="00717" />
      <option name="presentableId" value="LOCAL-00717" />
      <option name="project" value="LOCAL" />
      <updated>1610308799198</updated>
    </task>
    <task id="LOCAL-00718" summary="Fix typo">
      <created>1610309736556</created>
      <option name="number" value="00718" />
      <option name="presentableId" value="LOCAL-00718" />
      <option name="project" value="LOCAL" />
      <updated>1610309736556</updated>
    </task>
    <task id="LOCAL-00719" summary="Update comment">
      <created>1610310729051</created>
      <option name="number" value="00719" />
      <option name="presentableId" value="LOCAL-00719" />
      <option name="project" value="LOCAL" />
      <updated>1610310729051</updated>
    </task>
    <task id="LOCAL-00720" summary="Add time complexity for both the approaches">
      <created>1610311434389</created>
      <option name="number" value="00720" />
      <option name="presentableId" value="LOCAL-00720" />
      <option name="project" value="LOCAL" />
      <updated>1610311434389</updated>
    </task>
    <task id="LOCAL-00721" summary="Update approach">
      <created>1610311932855</created>
      <option name="number" value="00721" />
      <option name="presentableId" value="LOCAL-00721" />
      <option name="project" value="LOCAL" />
      <updated>1610311932855</updated>
    </task>
    <task id="LOCAL-00722" summary="Add comment and simplify code">
      <created>1610449035792</created>
      <option name="number" value="00722" />
      <option name="presentableId" value="LOCAL-00722" />
      <option name="project" value="LOCAL" />
      <updated>1610449035792</updated>
    </task>
    <task id="LOCAL-00723" summary="Fix logic by iterating over worker indexes first, because worker index have higher priority over bike indexes &#10;ie. (worker_idx, bike_idx) (1,2) &gt; (2,0) if distances is same">
      <created>1610457362444</created>
      <option name="number" value="00723" />
      <option name="presentableId" value="LOCAL-00723" />
      <option name="project" value="LOCAL" />
      <updated>1610457362444</updated>
    </task>
    <task id="LOCAL-00724" summary="Add comment on reason behind tracking max and min because we have to keep track of difference between smallest and largest transformed number">
      <created>1610458254247</created>
      <option name="number" value="00724" />
      <option name="presentableId" value="LOCAL-00724" />
      <option name="project" value="LOCAL" />
      <updated>1610458254247</updated>
    </task>
    <task id="LOCAL-00725" summary="Update comment to add sample calculations">
      <created>1610461017710</created>
      <option name="number" value="00725" />
      <option name="presentableId" value="LOCAL-00725" />
      <option name="project" value="LOCAL" />
      <updated>1610461017710</updated>
    </task>
    <task id="LOCAL-00726" summary="Add related problem, this greedy problem is also extremely tricky">
      <created>1610461388663</created>
      <option name="number" value="00726" />
      <option name="presentableId" value="LOCAL-00726" />
      <option name="project" value="LOCAL" />
      <updated>1610461388663</updated>
    </task>
    <task id="LOCAL-00727" summary="Add explanation behind counting valid subarrays using (end - begin + 1)">
      <created>1610464880983</created>
      <option name="number" value="00727" />
      <option name="presentableId" value="LOCAL-00727" />
      <option name="project" value="LOCAL" />
      <updated>1610464880983</updated>
    </task>
    <option name="localTasksCounter" value="728" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="1">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="roots">
                    <value>
                      <list>
                        <option value="$PROJECT_DIR$" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="2">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="roots">
                    <value>
                      <list>
                        <option value="$PROJECT_DIR$" />
                      </list>
                    </value>
                  </entry>
                  <entry key="text">
                    <value>
                      <list>
                        <option value="hard and tricky" />
                      </list>
                    </value>
                  </entry>
                  <entry key="user">
                    <value>
                      <list>
                        <option value="snehasishiiita" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State>
              <option name="COLUMN_ID_WIDTH">
                <map>
                  <entry key="Table.Default.Date.ColumnIdWidth" value="119" />
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT" value="true" />
    <MESSAGE value="Simplify code by removing redundant null checks" />
    <MESSAGE value="Solve medium and a bit tricky, merge all emails associated with the same person by performing union find on strings. &#10;&#10;Union find on strings is a bit tricky as we need to either have a unique identifier associated with each string, here we can use the index as an id, if we see an email is already associated with another index, we perform union on those two indices." />
    <MESSAGE value="Add comment to explain the additional code in union() operation on strings" />
    <MESSAGE value="Add clarifications on handling duplicate elements" />
    <MESSAGE value="Add comments and time complexity in MostStonesRemovedWithSameRowOrSameColumn" />
    <MESSAGE value="Update comment regarding handling of parallel edges" />
    <MESSAGE value="Add comment to solve the problem in another way" />
    <MESSAGE value="Solve hard and extremely tricky represent data stream as disjoint intervals by merging consecutive integers ie. 1,2,3,4 are merged to form [1,4] using treeMap&#10;&#10;Learnings -- To handle interval related problem, always ensure that there is no overlapping interval before or after an operation, so whenever do something, remove overlapped intervals and introduce a merged interval" />
    <MESSAGE value="Solve hard and extremely tricky find the min no of flips required so that array does not have any 0. Whenever flip is performed, we have to flip k consecutive bits. Need to use greedy ie. whenever we see a 0, flip k consecutive bits. If we actually flip it, time complexity would be o(nk), instead we perform virtual flips i.e we keep track of indices till which we have to perform flips and size of queue would indicate the no of flips performed. If A[i] == 1 and we have performed even bits, A[i] is still 1, so skip it." />
    <MESSAGE value="Add problem statement and approach for counting prime numbers &lt; n using sieve of eratosthenes" />
    <MESSAGE value="Solve medium math related problem, find the count of numbers with odd no of divisors by counting perfect squares" />
    <MESSAGE value="Solve hard and extremely tricky count the no of ways in which we can place P,A,L to generate strings of N length such that we can have at most 1 A and at most 2 consecutive L in the generated string using recursion with memoization&#10;&#10;Learnings -- Figure out the information required at each state, this will help in figuring the parameters required in recursion. Here we need to know the count of P, A and consecutive L present at each state" />
    <MESSAGE value="Add gotcha in hard and extremely tricky problem in counting subsequences that matches a given target string" />
    <MESSAGE value="Solve count distinct subsequences in a string that matches target string using binary search + memoization. In my initial attempt, I thought my solution isn't memoizable but I proved myself wrong ! What a day !" />
    <MESSAGE value="Simplify code by removing if/else check during removal of key from hashmap" />
    <MESSAGE value="Fix typo" />
    <MESSAGE value="Update comment" />
    <MESSAGE value="Add time complexity for both the approaches" />
    <MESSAGE value="Update approach" />
    <MESSAGE value="Add comment and simplify code" />
    <MESSAGE value="Fix logic by iterating over worker indexes first, because worker index have higher priority over bike indexes &#10;ie. (worker_idx, bike_idx) (1,2) &gt; (2,0) if distances is same" />
    <MESSAGE value="Add comment on reason behind tracking max and min because we have to keep track of difference between smallest and largest transformed number" />
    <MESSAGE value="Update comment to add sample calculations" />
    <MESSAGE value="Add related problem, this greedy problem is also extremely tricky" />
    <MESSAGE value="Add explanation behind counting valid subarrays using (end - begin + 1)" />
    <option name="LAST_COMMIT_MESSAGE" value="Add explanation behind counting valid subarrays using (end - begin + 1)" />
    <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REARRANGE_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/SortColors.java</url>
          <line>29</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
        <line-breakpoint type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/GeneralizedAbbreviations.java</url>
          <line>33</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
        <breakpoint enabled="true" type="java-exception">
          <properties class="java.lang.StackOverflowError" package="java.lang" />
          <option name="timeStamp" value="9" />
        </breakpoint>
      </breakpoints>
      <default-breakpoints>
        <breakpoint type="java-exception">
          <condition expression="this instanceof StringIndexOutOfBoundsException" language="JAVA" />
          <properties>
            <catch-class-filters>
              <class-filter pattern="java.lang.ArrayIndexOutOfBoundsException" />
            </catch-class-filters>
          </properties>
        </breakpoint>
      </default-breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="JUnit">
        <watch expression="grid" />
        <watch expression="uniqueString.entrySet().toArray()[0]" />
      </configuration>
    </watches-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>