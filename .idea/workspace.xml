<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="BranchesTreeState">
    <expand />
    <select>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="LOCAL_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
    </select>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7dbb84ff-cb70-4f33-84ac-c2138746d980" name="Default Changelist" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="JUnit5 Test Class" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="PUSH_TAGS">
      <GitPushTagMode />
    </option>
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="GithubPullRequestsUISettings">
    <option name="hiddenUrls">
      <set>
        <option value="https://github.com/snehasishroy/leetcode-practice.git" />
      </set>
    </option>
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="vmOptionsForImporter" value="-Xmx768m" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="ProjectId" id="1OYjUozR2wA5XfxN4lSupdXEdA9" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showMembers" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="Downloaded.Files.Path.Enabled" value="false" />
    <property name="Repository.Attach.Annotations" value="true" />
    <property name="Repository.Attach.JavaDocs" value="true" />
    <property name="Repository.Attach.Sources" value="true" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="ToolWindowRun.ShowToolbar" value="false" />
    <property name="com.intellij.ide.scratch.LRUPopupBuilder$1/New Scratch File" value="JAVA" />
    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary" value="JUnit5" />
    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5" value="" />
    <property name="extract.method.default.visibility" value="private" />
    <property name="last.edited.regexp" value="abc\ntasd\n" />
    <property name="last_directory_selection" value="$PROJECT_DIR$/src/main/java/common" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="preferences.editor" />
  </component>
  <component name="RecentsManager">
    <key name="CreateTestDialog.RecentsKey">
      <recent name="" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="" />
      <recent name="alternate" />
      <recent name="common" />
    </key>
    <key name="MoveInnerDialog.RECENTS_KEY">
      <recent name="common" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="" />
    </key>
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
  </component>
  <component name="RunManager" selected="Application.BeautifulArrangement">
    <configuration name="BeautifulArrangement" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="BeautifulArrangement" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DivideChocolates" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="DivideChocolates" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="JumpGame4" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="JumpGame4" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Unnamed" type="JUnit" factoryName="JUnit" nameIsGenerated="true">
      <module name="leetcode-practice" />
      <option name="MAIN_CLASS_NAME" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="class" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Scratch" type="Java Scratch" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Scratch" />
      <option name="SCRATCH_FILE_URL" value="file://$APPLICATION_CONFIG_DIR$/scratches/scratch.java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SegmentTree" type="Java Scratch" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="SegmentTree" />
      <option name="SCRATCH_FILE_URL" value="file://$APPLICATION_CONFIG_DIR$/scratches/scratch_1.java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Application.DivideChocolates" />
      <item itemvalue="Application.JumpGame4" />
      <item itemvalue="Application.BeautifulArrangement" />
      <item itemvalue="Java Scratch.SegmentTree" />
      <item itemvalue="Java Scratch.Scratch" />
      <item itemvalue="JUnit.Unnamed" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Application.BeautifulArrangement" />
        <item itemvalue="Application.JumpGame4" />
        <item itemvalue="Java Scratch.Scratch" />
        <item itemvalue="Application.DivideChocolates" />
        <item itemvalue="Java Scratch.SegmentTree" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="project-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="7dbb84ff-cb70-4f33-84ac-c2138746d980" name="Default Changelist" comment="" />
      <created>1561288929632</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1561288929632</updated>
    </task>
    <task id="LOCAL-00639" summary="Solve medium and tricky problem (if using DSU as an optimization) find whether two sentences are similar or not if each word in a sentence can be transformed to corresponding word in another sentence if the words are connected&#10;&#10;DFS or Union Find can be used to find whether two words are connected, DSU performs better!">
      <created>1608758037051</created>
      <option name="number" value="00639" />
      <option name="presentableId" value="LOCAL-00639" />
      <option name="project" value="LOCAL" />
      <updated>1608758037051</updated>
    </task>
    <task id="LOCAL-00640" summary="Solve hard find whether the frog can reach the end by jumping k, k-1 or k+1 steps (k here is the last jump performed, initially k = 1) by using recursion + memoization&#10;&#10;Thought this would be a tough problem but was pleasantly surprised.">
      <created>1608814542128</created>
      <option name="number" value="00640" />
      <option name="presentableId" value="LOCAL-00640" />
      <option name="project" value="LOCAL" />
      <updated>1608814542128</updated>
    </task>
    <task id="LOCAL-00641" summary="Solve medium find the maximum length of increasing pairs by solving it similar to LIS or by considering it as an interval scheduling problem&#10;&#10;Learnings -- When provided a set of points, sometimes it's simpler to solve if we visualize it as an interval scheduling problem.">
      <created>1608815942136</created>
      <option name="number" value="00641" />
      <option name="presentableId" value="LOCAL-00641" />
      <option name="project" value="LOCAL" />
      <updated>1608815942137</updated>
    </task>
    <task id="LOCAL-00642" summary="Solve medium and tricky find all the strobogrammatic numbers of a specific length using recursion&#10;&#10;Leveraged prior learnings of solving ConfusingNumber that only digits 0,1,6,8,9 can contribute to a valid number.">
      <created>1608829992350</created>
      <option name="number" value="00642" />
      <option name="presentableId" value="LOCAL-00642" />
      <option name="project" value="LOCAL" />
      <updated>1608829992351</updated>
    </task>
    <task id="LOCAL-00643" summary="Solve hard and extremely tricky digit dp question, find all the numbers that can be formed from a set of valid digit and is &lt; target number &#10;&#10;Solved it on my own after watching Kartik's video on Digit DP. Only thing different in this question is to perform computation for lengths of all strings of 1,2,3..(target.length).&#10;&#10;Gave myself a pat on the back.">
      <created>1608844278127</created>
      <option name="number" value="00643" />
      <option name="presentableId" value="LOCAL-00643" />
      <option name="project" value="LOCAL" />
      <updated>1608844278127</updated>
    </task>
    <task id="LOCAL-00644" summary="Solve medium and tricky digit dp problem, find the count of numbers with unique digit &lt; 10^x. &#10;It was more of a math related problem rather than DP. Initially we have 10 choices and as we fix numbers, we are left with one less choice. Special case for first digit as it can't have 0.">
      <created>1608848942495</created>
      <option name="number" value="00644" />
      <option name="presentableId" value="LOCAL-00644" />
      <option name="project" value="LOCAL" />
      <updated>1608848942495</updated>
    </task>
    <task id="LOCAL-00645" summary="Solve medium find the zig-zag diagonal traversal of a matrix by leveraging all elements of same diagonals have same identifier, either row+col or row-col.">
      <created>1608904076492</created>
      <option name="number" value="00645" />
      <option name="presentableId" value="LOCAL-00645" />
      <option name="project" value="LOCAL" />
      <updated>1608904076492</updated>
    </task>
    <task id="LOCAL-00646" summary="Solve medium and tricky find single element in sorted array such that all other elements repeat twice using binary search.&#10;&#10;Trick was to note that numbers on the left side of the target have even and odd indices with same value whereas on the right, odd and even indices have the same value. Use this fact to reduce this to T,T,T,F,F,F,F along with handling edge cases when target is the first or last element of the array.">
      <created>1608917839574</created>
      <option name="number" value="00646" />
      <option name="presentableId" value="LOCAL-00646" />
      <option name="project" value="LOCAL" />
      <updated>1608917839575</updated>
    </task>
    <task id="LOCAL-00647" summary="Add gotcha around resetting the tank to 0, if current station has negative tank at current index i.e gas[i] - cost[i] is negative">
      <created>1608925041503</created>
      <option name="number" value="00647" />
      <option name="presentableId" value="LOCAL-00647" />
      <option name="project" value="LOCAL" />
      <updated>1608925041503</updated>
    </task>
    <task id="LOCAL-00648" summary="Solve medium and extremely tricky find the maximum index you can reach provided a set of bricks and ladders. Given constraint screams of greedy. Trick was to use ladders at the current place or at some previous place, whichever gives the most amount of bricks back.&#10;This travel back in time and correct the mistake is a new pattern which I am seeing today.">
      <created>1608926456682</created>
      <option name="number" value="00648" />
      <option name="presentableId" value="LOCAL-00648" />
      <option name="project" value="LOCAL" />
      <updated>1608926456682</updated>
    </task>
    <task id="LOCAL-00649" summary="Solve easy find the count of substrings with only one distinct letter by counting the length of the longest substring with only one distinct letter and then breaking it down into smaller substrings.">
      <created>1609008952270</created>
      <option name="number" value="00649" />
      <option name="presentableId" value="LOCAL-00649" />
      <option name="project" value="LOCAL" />
      <updated>1609008952270</updated>
    </task>
    <task id="LOCAL-00650" summary="Solve hard and a bit tricky find the min jumps required to reach the last index given that you can jump to i-1, i+1 or any other index with the same value using BFS and biDirectional BFS&#10;&#10;Learnings -- Finally implemented Bidirectional BFS after keeping it in my todo, keep alternating between forward queue and backward queue by performing size check and remember to check whether any neighbour of current node exists in other queue or not.">
      <created>1609069499293</created>
      <option name="number" value="00650" />
      <option name="presentableId" value="LOCAL-00650" />
      <option name="project" value="LOCAL" />
      <updated>1609069499293</updated>
    </task>
    <task id="LOCAL-00651" summary="Solve medium and tricky find the min no of moves required by knight to reach a target cell using bidirectional bfs. Normal BFS times out. Can be solved in O(1) using maths :D but that's too tough to solve in interview.&#10;&#10;Leveraged prior learnings of using bidirectional BFS.">
      <created>1609072219479</created>
      <option name="number" value="00651" />
      <option name="presentableId" value="LOCAL-00651" />
      <option name="project" value="LOCAL" />
      <updated>1609072219479</updated>
    </task>
    <task id="LOCAL-00652" summary="Add clarification around why sorting is required because we need to pick a set of valid envelopes, rather than a subsequence">
      <created>1609074328537</created>
      <option name="number" value="00652" />
      <option name="presentableId" value="LOCAL-00652" />
      <option name="project" value="LOCAL" />
      <updated>1609074328537</updated>
    </task>
    <task id="LOCAL-00653" summary="Solve easy find whether a number is strobogrammatic or not using two pointers. Remember that only 0,1,6,8,9 can contribute to a number being valid">
      <created>1609078933642</created>
      <option name="number" value="00653" />
      <option name="presentableId" value="LOCAL-00653" />
      <option name="project" value="LOCAL" />
      <updated>1609078933642</updated>
    </task>
    <task id="LOCAL-00654" summary="Solve hard and extremely tricky find count of confusing numbers &lt;= n, a number is said to be confusing, if it's rotated 180 deg it's still valid but it should be different than input number &#10;&#10;Initially I solved it with backtracking by fixing digits one at a time using [0,1,6,8,9]. Took ~600 ms.&#10;Then found all the valid numbers with digit [0,1,6,8,9] &lt;= n. Then found strobogrammatic numbers &lt;= n. Result is a - b.&#10;This hard problem is combination of two hard problems. EPIC !">
      <created>1609104431967</created>
      <option name="number" value="00654" />
      <option name="presentableId" value="LOCAL-00654" />
      <option name="project" value="LOCAL" />
      <updated>1609104431967</updated>
    </task>
    <task id="LOCAL-00655" summary="Solve hard and extremely tricky find all strobogrammatic numbers that lies within a range low &lt;= x &lt;= high by fixing pairwise digits and checking whether the string generated at the end is within bounds. &#10;&#10;I honestly thought it would take a lot of time but I was pleasantly surprised. Digit DP is a bit tough to understand but it's surprisingly fast.">
      <created>1609105309449</created>
      <option name="number" value="00655" />
      <option name="presentableId" value="LOCAL-00655" />
      <option name="project" value="LOCAL" />
      <updated>1609105309449</updated>
    </task>
    <task id="LOCAL-00656" summary="Solve hard and extremely tricky find whether it's possible to reach the last index from current index, if we can jump to some specific indices during odd/even numbered jumps. Trickiest part was to compute those indices. After that, it was just regular DFS.&#10;&#10;Learnings -- When asked to find valid indices on the right such that it is not restricted to finding the first valid number on the right, it might be better to traverse from the right instead. I was trying to iterate from the left using monotonic stack but couldn't make it work.">
      <created>1609187665288</created>
      <option name="number" value="00656" />
      <option name="presentableId" value="LOCAL-00656" />
      <option name="project" value="LOCAL" />
      <updated>1609187665288</updated>
    </task>
    <task id="LOCAL-00657" summary="Solve hard and extremely tricky find the least numbers of transactions required to settle debts among friends by using backtracking !&#10;&#10;Learnings -- Although GFG solutions proposes Greedy solution for this but Leetcode articles prove that it's a NP Problem in which we have to check all combinations by trying to settle one person at a time by transferring one's debt/credit to another with credit/debt (opposing credit) and recurring.">
      <created>1609193673894</created>
      <option name="number" value="00657" />
      <option name="presentableId" value="LOCAL-00657" />
      <option name="project" value="LOCAL" />
      <updated>1609193673894</updated>
    </task>
    <task id="LOCAL-00658" summary="Solve medium find the total no of root to leaf paths that can be reordered to make a palindrome by keeping track of frequency count of elements present in root to leaf path. Atmost one odd element should be present in order to make the path palindrome&#10;&#10;Can leverage bitmask to remove int[]. xor can be used to ensure a digit has odd frequency.">
      <created>1609244731894</created>
      <option name="number" value="00658" />
      <option name="presentableId" value="LOCAL-00658" />
      <option name="project" value="LOCAL" />
      <updated>1609244731894</updated>
    </task>
    <task id="LOCAL-00659" summary="Solve medium and tricky to optimize, design a way to assign and release id's in a specific range using linkedlist or set.&#10;&#10;In my initial implementation I went ahead with the same approach learnt in ExamRoom, but it can be optimized if instead of maintaining set of assigned numbers, we track set of recycled numbers.&#10;In another implementation I solved it similar to circular linked list, where each node points to next unassigned node. We always assign from head. When a node is recycled, we add the recycled node back to head">
      <created>1609250665946</created>
      <option name="number" value="00659" />
      <option name="presentableId" value="LOCAL-00659" />
      <option name="project" value="LOCAL" />
      <updated>1609250665946</updated>
    </task>
    <task id="LOCAL-00660" summary="Solve medium and a bit tricky create a quad tree from the given grid using recursion. Tricky thing was to divide the grid into 4 parts. Initially I divided it by tracking x,y of topleft and bottomright cell of current grid. New locations were calculated using low + (high-low)/2">
      <created>1609413542822</created>
      <option name="number" value="00660" />
      <option name="presentableId" value="LOCAL-00660" />
      <option name="project" value="LOCAL" />
      <updated>1609413542822</updated>
    </task>
    <task id="LOCAL-00661" summary="Solve medium design a run length encoding iterator which if provided a rle encoded string, returns the kth next character by keeping track of frequency of each char and the frequency required.">
      <created>1609416555007</created>
      <option name="number" value="00661" />
      <option name="presentableId" value="LOCAL-00661" />
      <option name="project" value="LOCAL" />
      <updated>1609416555007</updated>
    </task>
    <task id="LOCAL-00662" summary="Solve medium support a snapshot array that returns the value of any index at a specific snap using multiple approaches&#10;&#10;1. get() in o(total_snaps) by storing (index, snap_id) -&gt; value directly in map and then iterating down to find a valid snap_id&#10;2. get() in o(log(total_snaps)) and set() in o(log(total_snaps)) by storing a treemap of snap_id -&gt; value for each index and then finding a snap_id &lt;= provided snap_id in the map of the given index.">
      <created>1609419103958</created>
      <option name="number" value="00662" />
      <option name="presentableId" value="LOCAL-00662" />
      <option name="project" value="LOCAL" />
      <updated>1609419103959</updated>
    </task>
    <task id="LOCAL-00663" summary="Solve medium design a leaderboard which supports updating scores of a player as well as finding the top k scores using hashmap + treemap (priority queue)&#10;&#10;Leveraged prior learning of using treemap instead of priority queue when deletion is required.">
      <created>1609424004407</created>
      <option name="number" value="00663" />
      <option name="presentableId" value="LOCAL-00663" />
      <option name="project" value="LOCAL" />
      <updated>1609424004407</updated>
    </task>
    <task id="LOCAL-00664" summary="Solve medium and a bit tricky to implement, find the longest length of consecutive 1's in a matrix in horizontal, vertical, diagonal and anti diagonal directions using 4D DP and leveraging the fact that row-col and row+col for elements in same diagonal are same&#10;&#10;Learnings -- row-col can be negative, so if we want to use array for storing current length of consecutive 1's seen in the diagonal, we need to make it positive by adding +n (column length)">
      <created>1609431683986</created>
      <option name="number" value="00664" />
      <option name="presentableId" value="LOCAL-00664" />
      <option name="project" value="LOCAL" />
      <updated>1609431683986</updated>
    </task>
    <task id="LOCAL-00665" summary="Solve easy find whether it's possible to transform the given pieces of array into target array by trying to concatenate them in any way possible, by tracking the leader of each piece and the entire piece.&#10;&#10;It was a bit tricky to implement though, not an easy question! Need to make sure the entire piece is fulfilled as partial pieces are not allowed.">
      <created>1609500520505</created>
      <option name="number" value="00665" />
      <option name="presentableId" value="LOCAL-00665" />
      <option name="project" value="LOCAL" />
      <updated>1609500520505</updated>
    </task>
    <task id="LOCAL-00666" summary="Solve medium and extremely tricky to optimize given a list of words, find which words are a subsequence of the provided string. I got AC by keeping track of occurrence of each character in the target string and see if you can find an index &gt; previous index.&#10;&#10;An optimized approach would be to maintain a mapping of character to the list of words that require that character. As we traverse the string, update the mappings.">
      <created>1609505562032</created>
      <option name="number" value="00666" />
      <option name="presentableId" value="LOCAL-00666" />
      <option name="project" value="LOCAL" />
      <updated>1609505562032</updated>
    </task>
    <task id="LOCAL-00667" summary="Solve medium and extremely tricky find no of fleets that will be formed by cars starting at different positions and travelling at different speed towards target using greedy. Tricky thing to note was that a car starting earlier and reaching in t time will block cars starting later and reaching in x &lt; t time. So they will become part of an existing fleet.">
      <created>1609511707028</created>
      <option name="number" value="00667" />
      <option name="presentableId" value="LOCAL-00667" />
      <option name="project" value="LOCAL" />
      <updated>1609511707028</updated>
    </task>
    <task id="LOCAL-00668" summary="Solve hard and extremely tricky count no of distinct subsequences in a string, that can contain duplicate characters using o(n^2) and o(n) DP. Please read the comments inside the source for better understanding.">
      <created>1609522643849</created>
      <option name="number" value="00668" />
      <option name="presentableId" value="LOCAL-00668" />
      <option name="project" value="LOCAL" />
      <updated>1609522643849</updated>
    </task>
    <task id="LOCAL-00669" summary="Solve medium and tricky remove comments from a source code using string parsing by visualizing it as a state machine. Although I knew how to write the code, still I figured to see the solution in order to &quot;save me from humiliation&quot;. &#10;&#10;Learnings -- Trick to solving string parsing question is to visualize it as a state machine i.e if /* is encountered switch to a different mode and carefully decide each mode's priority. It will make code very easier.">
      <created>1609534234307</created>
      <option name="number" value="00669" />
      <option name="presentableId" value="LOCAL-00669" />
      <option name="project" value="LOCAL" />
      <updated>1609534234307</updated>
    </task>
    <task id="LOCAL-00670" summary="Solve medium find the corresponding node of a target node in the cloned tree by walking both the tress simultaneously.">
      <created>1609588530030</created>
      <option name="number" value="00670" />
      <option name="presentableId" value="LOCAL-00670" />
      <option name="project" value="LOCAL" />
      <updated>1609588530030</updated>
    </task>
    <task id="LOCAL-00671" summary="Solve medium sort a matrix diagonally such that each diagonal is sorted separately by maintaining a map of diagonalId to priority queue of elements present in that diagonal">
      <created>1609598503562</created>
      <option name="number" value="00671" />
      <option name="presentableId" value="LOCAL-00671" />
      <option name="project" value="LOCAL" />
      <updated>1609598503562</updated>
    </task>
    <task id="LOCAL-00672" summary="Solve medium and extremely tricky find the largest sum possible that is divisible by 3 using DP.&#10;&#10;Leveraged prior learnings of using mod whenever divisibility is involved. Here we need to do the same by using current mod and greatest sum possible at previous element. State transitions are similar to previously solved house robber.">
      <created>1609658415978</created>
      <option name="number" value="00672" />
      <option name="presentableId" value="LOCAL-00672" />
      <option name="project" value="LOCAL" />
      <updated>1609658415979</updated>
    </task>
    <task id="LOCAL-00673" summary="Solve medium design a time based key value data structure that provides the value of a key at a timestamp &lt;= provided timestamp using map + treemap combination.&#10;&#10;Leveraged prior learnings of solving SnapshotArray">
      <created>1609668726279</created>
      <option name="number" value="00673" />
      <option name="presentableId" value="LOCAL-00673" />
      <option name="project" value="LOCAL" />
      <updated>1609668726282</updated>
    </task>
    <task id="LOCAL-00674" summary="Solve medium count all beautiful numbers of n digits, where we can place a digit on the ith index only if either the digit divides the index or the index divides the digit using backtracking or bitmasking&#10;&#10;Leveraged prior learnings of using (bitmask, current node/index) as an identifier for memoization during bitmasking.">
      <created>1609677197934</created>
      <option name="number" value="00674" />
      <option name="presentableId" value="LOCAL-00674" />
      <option name="project" value="LOCAL" />
      <updated>1609677197934</updated>
    </task>
    <task id="LOCAL-00675" summary="Solve medium and extremely tricky find the lexicographically smallest permutation of 1,2,3..n that satisfies pattern like I and D by greedy. Consider the base case of all I's, it would be 1,2,3...n. Whenever D is found, need to reverse the portion to find the smallest valid permutation. &#10;&#10;Got lost while trying to incrementally build the solution by tracking length of I's and D's and placing numbers accordingly.">
      <created>1609681353826</created>
      <option name="number" value="00675" />
      <option name="presentableId" value="LOCAL-00675" />
      <option name="project" value="LOCAL" />
      <updated>1609681353826</updated>
    </task>
    <task id="LOCAL-00676" summary="Solve medium find all increasing subsequences using bottom up DP. Care must be taken to handle duplicates. Got a couple of WA's due to missing edge cases like handling cases where duplicates occur &gt; 2 times [1,3,3,3] and duplicates are not contiguous [10,9,10]">
      <created>1609693106251</created>
      <option name="number" value="00676" />
      <option name="presentableId" value="LOCAL-00676" />
      <option name="project" value="LOCAL" />
      <updated>1609693106251</updated>
    </task>
    <task id="LOCAL-00677" summary="Rename variable to make it more similar to it's usage">
      <created>1609700125536</created>
      <option name="number" value="00677" />
      <option name="presentableId" value="LOCAL-00677" />
      <option name="project" value="LOCAL" />
      <updated>1609700125536</updated>
    </task>
    <task id="LOCAL-00678" summary="Fix incorrect distance check when some node is unreachable">
      <created>1609700329414</created>
      <option name="number" value="00678" />
      <option name="presentableId" value="LOCAL-00678" />
      <option name="project" value="LOCAL" />
      <updated>1609700329414</updated>
    </task>
    <task id="LOCAL-00679" summary="Simplify code by using Math.min() instead">
      <created>1609701631705</created>
      <option name="number" value="00679" />
      <option name="presentableId" value="LOCAL-00679" />
      <option name="project" value="LOCAL" />
      <updated>1609701631705</updated>
    </task>
    <task id="LOCAL-00680" summary="Add gotchas in count distinct subsequences">
      <created>1609702580836</created>
      <option name="number" value="00680" />
      <option name="presentableId" value="LOCAL-00680" />
      <option name="project" value="LOCAL" />
      <updated>1609702580836</updated>
    </task>
    <task id="LOCAL-00681" summary="Simplify topological sort by using enums as states instead of maintaining two different arrays">
      <created>1609704581284</created>
      <option name="number" value="00681" />
      <option name="presentableId" value="LOCAL-00681" />
      <option name="project" value="LOCAL" />
      <updated>1609704581284</updated>
    </task>
    <task id="LOCAL-00682" summary="Solve medium remove all adjacent duplicate characters in string which are of k length using stack.">
      <created>1609707880372</created>
      <option name="number" value="00682" />
      <option name="presentableId" value="LOCAL-00682" />
      <option name="project" value="LOCAL" />
      <updated>1609707880372</updated>
    </task>
    <task id="LOCAL-00683" summary="Simplify code by just considering whether we can find a subset with targetSum = totalSum/2. Each element has two options, either be part of the subset or be excluded from it. Try both the options.">
      <created>1609801021438</created>
      <option name="number" value="00683" />
      <option name="presentableId" value="LOCAL-00683" />
      <option name="project" value="LOCAL" />
      <updated>1609801021438</updated>
    </task>
    <task id="LOCAL-00684" summary="Solve medium remove duplicates from a sorted linked list using dummy node">
      <created>1609859229894</created>
      <option name="number" value="00684" />
      <option name="presentableId" value="LOCAL-00684" />
      <option name="project" value="LOCAL" />
      <updated>1609859229894</updated>
    </task>
    <task id="LOCAL-00685" summary="Solve medium design data structure to represent browser history that supports going back and forward k steps in history using arraylist and ensuring that we overwrite the index, if we are at inner indices instead of creating a new list and appending to the end of it. &#10;This smart overwrite logic ensures we work in O(1) time for all operations">
      <created>1609860130126</created>
      <option name="number" value="00685" />
      <option name="presentableId" value="LOCAL-00685" />
      <option name="project" value="LOCAL" />
      <updated>1609860130126</updated>
    </task>
    <task id="LOCAL-00686" summary="Solve easy find out how many person's can be satisfied from given set of cookies if a person needs atleast a cookie of specific size to get satisfied using greedy by sorting the size of cookies and greed of each persons.">
      <created>1609860567797</created>
      <option name="number" value="00686" />
      <option name="presentableId" value="LOCAL-00686" />
      <option name="project" value="LOCAL" />
      <updated>1609860567797</updated>
    </task>
    <task id="LOCAL-00687" summary="Solve hard and extremely tricky rearrange a string such that same characters are placed at k distance apart using greedy approach. &#10;Couple of tricks were used&#10;1. Use PQ based on decreasing frequency as the characters that occurs the most should be placed first&#10;2. To ensure that we don't place characters early (&lt;k distance), use a queue for simulating characters that are waiting. Add the head of the queue back to PQ only if queue.size()==k">
      <created>1609868454040</created>
      <option name="number" value="00687" />
      <option name="presentableId" value="LOCAL-00687" />
      <option name="project" value="LOCAL" />
      <updated>1609868454040</updated>
    </task>
    <option name="localTasksCounter" value="688" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="1">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="roots">
                    <value>
                      <list>
                        <option value="$PROJECT_DIR$" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="2">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="roots">
                    <value>
                      <list>
                        <option value="$PROJECT_DIR$" />
                      </list>
                    </value>
                  </entry>
                  <entry key="text">
                    <value>
                      <list>
                        <option value="hard and tricky" />
                      </list>
                    </value>
                  </entry>
                  <entry key="user">
                    <value>
                      <list>
                        <option value="snehasishiiita" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="text">
                    <value>
                      <list>
                        <option value="game" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
              <option name="COLUMN_ID_WIDTH">
                <map>
                  <entry key="Table.Default.Date.ColumnIdWidth" value="119" />
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT" value="true" />
    <MESSAGE value="Solve medium design a leaderboard which supports updating scores of a player as well as finding the top k scores using hashmap + treemap (priority queue)&#10;&#10;Leveraged prior learning of using treemap instead of priority queue when deletion is required." />
    <MESSAGE value="Solve medium and a bit tricky to implement, find the longest length of consecutive 1's in a matrix in horizontal, vertical, diagonal and anti diagonal directions using 4D DP and leveraging the fact that row-col and row+col for elements in same diagonal are same&#10;&#10;Learnings -- row-col can be negative, so if we want to use array for storing current length of consecutive 1's seen in the diagonal, we need to make it positive by adding +n (column length)" />
    <MESSAGE value="Solve easy find whether it's possible to transform the given pieces of array into target array by trying to concatenate them in any way possible, by tracking the leader of each piece and the entire piece.&#10;&#10;It was a bit tricky to implement though, not an easy question! Need to make sure the entire piece is fulfilled as partial pieces are not allowed." />
    <MESSAGE value="Solve medium and extremely tricky to optimize given a list of words, find which words are a subsequence of the provided string. I got AC by keeping track of occurrence of each character in the target string and see if you can find an index &gt; previous index.&#10;&#10;An optimized approach would be to maintain a mapping of character to the list of words that require that character. As we traverse the string, update the mappings." />
    <MESSAGE value="Solve medium and extremely tricky find no of fleets that will be formed by cars starting at different positions and travelling at different speed towards target using greedy. Tricky thing to note was that a car starting earlier and reaching in t time will block cars starting later and reaching in x &lt; t time. So they will become part of an existing fleet." />
    <MESSAGE value="Solve hard and extremely tricky count no of distinct subsequences in a string, that can contain duplicate characters using o(n^2) and o(n) DP. Please read the comments inside the source for better understanding." />
    <MESSAGE value="Solve medium and tricky remove comments from a source code using string parsing by visualizing it as a state machine. Although I knew how to write the code, still I figured to see the solution in order to &quot;save me from humiliation&quot;. &#10;&#10;Learnings -- Trick to solving string parsing question is to visualize it as a state machine i.e if /* is encountered switch to a different mode and carefully decide each mode's priority. It will make code very easier." />
    <MESSAGE value="Solve medium find the corresponding node of a target node in the cloned tree by walking both the tress simultaneously." />
    <MESSAGE value="Solve medium sort a matrix diagonally such that each diagonal is sorted separately by maintaining a map of diagonalId to priority queue of elements present in that diagonal" />
    <MESSAGE value="Solve medium and extremely tricky find the largest sum possible that is divisible by 3 using DP.&#10;&#10;Leveraged prior learnings of using mod whenever divisibility is involved. Here we need to do the same by using current mod and greatest sum possible at previous element. State transitions are similar to previously solved house robber." />
    <MESSAGE value="Solve medium design a time based key value data structure that provides the value of a key at a timestamp &lt;= provided timestamp using map + treemap combination.&#10;&#10;Leveraged prior learnings of solving SnapshotArray" />
    <MESSAGE value="Solve medium count all beautiful numbers of n digits, where we can place a digit on the ith index only if either the digit divides the index or the index divides the digit using backtracking or bitmasking&#10;&#10;Leveraged prior learnings of using (bitmask, current node/index) as an identifier for memoization during bitmasking." />
    <MESSAGE value="Solve medium and extremely tricky find the lexicographically smallest permutation of 1,2,3..n that satisfies pattern like I and D by greedy. Consider the base case of all I's, it would be 1,2,3...n. Whenever D is found, need to reverse the portion to find the smallest valid permutation. &#10;&#10;Got lost while trying to incrementally build the solution by tracking length of I's and D's and placing numbers accordingly." />
    <MESSAGE value="Solve medium find all increasing subsequences using bottom up DP. Care must be taken to handle duplicates. Got a couple of WA's due to missing edge cases like handling cases where duplicates occur &gt; 2 times [1,3,3,3] and duplicates are not contiguous [10,9,10]" />
    <MESSAGE value="Rename variable to make it more similar to it's usage" />
    <MESSAGE value="Fix incorrect distance check when some node is unreachable" />
    <MESSAGE value="Simplify code by using Math.min() instead" />
    <MESSAGE value="Add gotchas in count distinct subsequences" />
    <MESSAGE value="Simplify topological sort by using enums as states instead of maintaining two different arrays" />
    <MESSAGE value="Solve medium remove all adjacent duplicate characters in string which are of k length using stack." />
    <MESSAGE value="Simplify code by just considering whether we can find a subset with targetSum = totalSum/2. Each element has two options, either be part of the subset or be excluded from it. Try both the options." />
    <MESSAGE value="Solve medium remove duplicates from a sorted linked list using dummy node" />
    <MESSAGE value="Solve medium design data structure to represent browser history that supports going back and forward k steps in history using arraylist and ensuring that we overwrite the index, if we are at inner indices instead of creating a new list and appending to the end of it. &#10;This smart overwrite logic ensures we work in O(1) time for all operations" />
    <MESSAGE value="Solve easy find out how many person's can be satisfied from given set of cookies if a person needs atleast a cookie of specific size to get satisfied using greedy by sorting the size of cookies and greed of each persons." />
    <MESSAGE value="Solve hard and extremely tricky rearrange a string such that same characters are placed at k distance apart using greedy approach. &#10;Couple of tricks were used&#10;1. Use PQ based on decreasing frequency as the characters that occurs the most should be placed first&#10;2. To ensure that we don't place characters early (&lt;k distance), use a queue for simulating characters that are waiting. Add the head of the queue back to PQ only if queue.size()==k" />
    <option name="LAST_COMMIT_MESSAGE" value="Solve hard and extremely tricky rearrange a string such that same characters are placed at k distance apart using greedy approach. &#10;Couple of tricks were used&#10;1. Use PQ based on decreasing frequency as the characters that occurs the most should be placed first&#10;2. To ensure that we don't place characters early (&lt;k distance), use a queue for simulating characters that are waiting. Add the head of the queue back to PQ only if queue.size()==k" />
    <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REARRANGE_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/DistinctSubsequences.java</url>
          <line>78</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/SortColors.java</url>
          <line>29</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/GeneralizedAbbreviations.java</url>
          <line>33</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
      </breakpoints>
      <default-breakpoints>
        <breakpoint enabled="true" type="java-exception">
          <condition expression="this instanceof StringIndexOutOfBoundsException" language="JAVA" />
          <properties>
            <catch-class-filters>
              <class-filter pattern="java.lang.ArrayIndexOutOfBoundsException" />
            </catch-class-filters>
          </properties>
        </breakpoint>
      </default-breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="JUnit">
        <watch expression="grid" />
        <watch expression="uniqueString.entrySet().toArray()[0]" />
      </configuration>
    </watches-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>