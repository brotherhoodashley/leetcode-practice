<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="BranchesTreeState">
    <expand />
    <select>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="LOCAL_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
    </select>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7dbb84ff-cb70-4f33-84ac-c2138746d980" name="Default Changelist" comment="Solve medium find the maximum length of pairs">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/TheMaze.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/TheMaze.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="JUnit5 Test Class" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
    <option name="PUSH_TAGS">
      <GitPushTagMode />
    </option>
  </component>
  <component name="GithubPullRequestsUISettings">
    <option name="hiddenUrls">
      <set>
        <option value="https://github.com/snehasishroy/leetcode-practice.git" />
      </set>
    </option>
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="vmOptionsForImporter" value="-Xmx768m" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="ProjectId" id="1OYjUozR2wA5XfxN4lSupdXEdA9" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showMembers" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="Downloaded.Files.Path.Enabled" value="false" />
    <property name="Repository.Attach.Annotations" value="true" />
    <property name="Repository.Attach.JavaDocs" value="true" />
    <property name="Repository.Attach.Sources" value="true" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="ToolWindowRun.ShowToolbar" value="false" />
    <property name="com.intellij.ide.scratch.LRUPopupBuilder$1/New Scratch File" value="JAVA" />
    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary" value="JUnit5" />
    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5" value="" />
    <property name="extract.method.default.visibility" value="private" />
    <property name="last.edited.regexp" value="abc\ntasd\n" />
    <property name="last_directory_selection" value="$PROJECT_DIR$/src/main/java/common" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="preferences.editor" />
  </component>
  <component name="RecentsManager">
    <key name="CreateTestDialog.RecentsKey">
      <recent name="" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="" />
      <recent name="alternate" />
      <recent name="common" />
    </key>
    <key name="MoveInnerDialog.RECENTS_KEY">
      <recent name="common" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="" />
    </key>
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
  </component>
  <component name="RunManager" selected="Application.JumpGame4">
    <configuration name="DivideChocolates" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="DivideChocolates" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="JumpGame4" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="JumpGame4" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Unnamed" type="JUnit" factoryName="JUnit" nameIsGenerated="true">
      <module name="leetcode-practice" />
      <option name="MAIN_CLASS_NAME" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="class" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Scratch (1)" type="Java Scratch" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Scratch" />
      <option name="SCRATCH_FILE_URL" value="file://$APPLICATION_CONFIG_DIR$/scratches/scratch_1.java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Scratch" type="Java Scratch" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Scratch" />
      <option name="SCRATCH_FILE_URL" value="file://$APPLICATION_CONFIG_DIR$/scratches/scratch.java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SegmentTree" type="Java Scratch" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="SegmentTree" />
      <option name="SCRATCH_FILE_URL" value="file://$APPLICATION_CONFIG_DIR$/scratches/scratch_1.java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Application.DivideChocolates" />
      <item itemvalue="Java Scratch.Scratch (1)" />
      <item itemvalue="Java Scratch.SegmentTree" />
      <item itemvalue="Java Scratch.Scratch" />
      <item itemvalue="JUnit.Unnamed" />
      <item itemvalue="Application.JumpGame4" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Application.JumpGame4" />
        <item itemvalue="Java Scratch.Scratch" />
        <item itemvalue="Application.DivideChocolates" />
        <item itemvalue="Java Scratch.SegmentTree" />
        <item itemvalue="Java Scratch.Scratch (1)" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="project-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="7dbb84ff-cb70-4f33-84ac-c2138746d980" name="Default Changelist" comment="" />
      <created>1561288929632</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1561288929632</updated>
    </task>
    <task id="LOCAL-00609" summary="Solve hard and extremely trick problem of finding shortest path that visits all nodes such that a node can be visited multiple times using BFS + Bitmasking&#10;&#10;First saw this problem in september, couldn't understand it a bit. Saw a similar problem recently PathWithMaximumGold in which one guy solved it similar to solving this problem. Revisited this problem and could now make sense of the provided solution. Practice makes a man perfect !&#10;&#10;Key thing to note is use BFS for finding shortest path and use set of visited nodes (bitmask) + current node as the key for determining already visited paths.">
      <created>1608044680373</created>
      <option name="number" value="00609" />
      <option name="presentableId" value="LOCAL-00609" />
      <option name="project" value="LOCAL" />
      <updated>1608044680373</updated>
    </task>
    <task id="LOCAL-00610" summary="Solve medium and tricky find the largest subset in which each pair of elements divide each other by sorting + checking whether current number can extend result stored in previous index&#10;&#10;Learnings -- In case of subset problems, order isn't important, so check if sorting helps! I was on the right track but didn't sort, hence got WA and then became confused.">
      <created>1608051958267</created>
      <option name="number" value="00610" />
      <option name="presentableId" value="LOCAL-00610" />
      <option name="project" value="LOCAL" />
      <updated>1608051958268</updated>
    </task>
    <task id="LOCAL-00611" summary="Solve medium find the no of tuples A,B,C,D in 4 arrays such that sum of tuples is 0 by storing pair wise sum of A+B in one hashmap and pair wise sum of C+D in another hashmap">
      <created>1608221116162</created>
      <option name="number" value="00611" />
      <option name="presentableId" value="LOCAL-00611" />
      <option name="project" value="LOCAL" />
      <updated>1608221116162</updated>
    </task>
    <task id="LOCAL-00612" summary="Solve medium find the earliest moment when everyone becomes friend i.e. when there is only one unique component left using Union Find&#10;&#10;Learnings -- We can stop when uniqueComponents == 1 (init it with N and decrement everytime you perform a union) or when size[root] == N (the last union performed had all the elements in the subtree)">
      <created>1608224202639</created>
      <option name="number" value="00612" />
      <option name="presentableId" value="LOCAL-00612" />
      <option name="project" value="LOCAL" />
      <updated>1608224202639</updated>
    </task>
    <task id="LOCAL-00613" summary="Solve medium find whether there is a increasing subsequence of size 3 in linear time and constant space. &#10;&#10;In order to solve it using linear space, I kept track of smallest number on the left and largest number on the right and compared each number.&#10;In order to solve in constant space, just keep track of two smallest numbers. If you find a number greater than second largest number, we got a valid triplet.">
      <created>1608317807875</created>
      <option name="number" value="00613" />
      <option name="presentableId" value="LOCAL-00613" />
      <option name="project" value="LOCAL" />
      <updated>1608317807875</updated>
    </task>
    <task id="LOCAL-00614" summary="Solve medium and tricky find the largest distance from land to water in a matrix by performing multi source BFS&#10;&#10;Leveraged prior learnings of using multi source BFS when asked to find distance between two sets of points">
      <created>1608380884331</created>
      <option name="number" value="00614" />
      <option name="presentableId" value="LOCAL-00614" />
      <option name="project" value="LOCAL" />
      <updated>1608380884331</updated>
    </task>
    <task id="LOCAL-00615" summary="Solve medium and tricky find the smallest weight that can allow us to ship all packages in &lt;= D days using binary search&#10;&#10;Leveraged prior learnings of using Binary search to solve optimization problems where the answer lies in a bound and verifying the result takes linear time.">
      <created>1608382843551</created>
      <option name="number" value="00615" />
      <option name="presentableId" value="LOCAL-00615" />
      <option name="project" value="LOCAL" />
      <updated>1608382843551</updated>
    </task>
    <task id="LOCAL-00616" summary="Update hard and extremely trick find the maximum of minimum sweetness that can satisfy k+1 persons using binary search &#10;&#10;I was not able to understand the logic of finding how many persons can be satisfied by choosing a specific min sweetness. The trick was to increase the persons satisfied count only if curSweetness &gt;= target sweetness. This way if there is some trailing subarray that can't satisfy a person won't get included in the overall count.">
      <created>1608388955434</created>
      <option name="number" value="00616" />
      <option name="presentableId" value="LOCAL-00616" />
      <option name="project" value="LOCAL" />
      <updated>1608388955434</updated>
    </task>
    <task id="LOCAL-00617" summary="Solve hard and tricky find the shortest distance of 0 (land) from all the 1 (building) by iteratively performing BFS from each 1 and updating the min distance to reach 0.&#10;&#10;Leveraged prior learnings of always performing BFS from outside nodes (1) rather than inside nodes (0). &#10;Also thought that probably multi bfs would have been faster but it's not, because we have to keep track of distances from all 1's rather than finding the distance from nearest 1.">
      <created>1608407670431</created>
      <option name="number" value="00617" />
      <option name="presentableId" value="LOCAL-00617" />
      <option name="project" value="LOCAL" />
      <updated>1608407670431</updated>
    </task>
    <task id="LOCAL-00618" summary="Solve medium and tricky find a number that minimizes the sum of absolute differences from all the numbers by choosing median as the target number.&#10;&#10;Learnings -- 1. Median minimizes the sum of absolute differences and mean minimizes the sum of squared differences.&#10;2. Median can be calculated without sorting by using quick select in linear time (use median of median as a further optimization step)">
      <created>1608451581199</created>
      <option name="number" value="00618" />
      <option name="presentableId" value="LOCAL-00618" />
      <option name="project" value="LOCAL" />
      <updated>1608451581199</updated>
    </task>
    <task id="LOCAL-00619" summary="Solve medium and extremely tricky find a number that minimizes the sum of absolute differences from all the numbers by choosing median as the target number in a 2D array.&#10;&#10;Learnings -- Since we need to minimize manhattan distance, median of 2D array can be calculated by separately calculating median of x and y indices.">
      <created>1608464253711</created>
      <option name="number" value="00619" />
      <option name="presentableId" value="LOCAL-00619" />
      <option name="project" value="LOCAL" />
      <updated>1608464253711</updated>
    </task>
    <task id="LOCAL-00620" summary="Solve medium and extremely tricky find the max no of moves required to make sure no two stones share the same row or same column by DFS and union find &#10;&#10;Trick to solve the problem was to find no of connected components and just keep only one stone of each component. So answer would be total stones - no of components&#10;&#10;Learnings -- 1. Sometimes 2D points can be visualized as 0,1 in a 2D grid, which can be expanded to a graph problem if we can visualize the edges correctly. Here two points are connected if they are on the same row or same column. &#10;2. Union find on 2D points is a bit tricky to visualize. Here we need to union row and col of current index so that in future if we get a new index with the same row and different col, we can still make it part of the same component.">
      <created>1608486419654</created>
      <option name="number" value="00620" />
      <option name="presentableId" value="LOCAL-00620" />
      <option name="project" value="LOCAL" />
      <updated>1608486419654</updated>
    </task>
    <task id="LOCAL-00621" summary="Solve medium and tricky problem find the no of edges required to make entire network connected by finding no of connected components using union find. If there are 5 components, you will need 4 extra edges to connect them.&#10;&#10;Leveraged prior learning that a graph has exactly n-1 edges, so at least we need n-1 connections to connect all the nodes.">
      <created>1608490203572</created>
      <option name="number" value="00621" />
      <option name="presentableId" value="LOCAL-00621" />
      <option name="project" value="LOCAL" />
      <updated>1608490203572</updated>
    </task>
    <task id="LOCAL-00622" summary="Solve medium find the minimum cost to merge all the sticks into a single stick in minimum cost by using greedy&#10;&#10;Leveraged prior learning of reading about optimal merge algorithm greedy pattern in topcoder.">
      <created>1608502975855</created>
      <option name="number" value="00622" />
      <option name="presentableId" value="LOCAL-00622" />
      <option name="project" value="LOCAL" />
      <updated>1608502975855</updated>
    </task>
    <task id="LOCAL-00623" summary="Solve medium and extremely tricky find the min difference between min and max elements of an array given that each number can either by incremented by k or decremented by k using greedy.&#10;&#10;Still couldn't properly grasp the solution. Will get back to it.">
      <created>1608579350095</created>
      <option name="number" value="00623" />
      <option name="presentableId" value="LOCAL-00623" />
      <option name="project" value="LOCAL" />
      <updated>1608579350095</updated>
    </task>
    <task id="LOCAL-00624" summary="Add possible hint on why we need to fix the index whose location is known correctly. Either the tallest person with no person standing in front of him or the index that was popped most recently.">
      <created>1608580551872</created>
      <option name="number" value="00624" />
      <option name="presentableId" value="LOCAL-00624" />
      <option name="project" value="LOCAL" />
      <updated>1608580551872</updated>
    </task>
    <task id="LOCAL-00625" summary="Simplify code by removing complicated bottom up code and add comment in existing top down code">
      <created>1608581476879</created>
      <option name="number" value="00625" />
      <option name="presentableId" value="LOCAL-00625" />
      <option name="project" value="LOCAL" />
      <updated>1608581476879</updated>
    </task>
    <task id="LOCAL-00626" summary="Simplify the code by relying on no of splits performed rather than number of chunks created.">
      <created>1608583275540</created>
      <option name="number" value="00626" />
      <option name="presentableId" value="LOCAL-00626" />
      <option name="project" value="LOCAL" />
      <updated>1608583275540</updated>
    </task>
    <task id="LOCAL-00627" summary="Add gotcha in adding extra whitespace at the end of the current sentence as well.">
      <created>1608584050985</created>
      <option name="number" value="00627" />
      <option name="presentableId" value="LOCAL-00627" />
      <option name="project" value="LOCAL" />
      <updated>1608584050985</updated>
    </task>
    <task id="LOCAL-00628" summary="Remove redundant addition to visited set during euler cycle and add clarification that visited string contains only words of n length">
      <created>1608586357047</created>
      <option name="number" value="00628" />
      <option name="presentableId" value="LOCAL-00628" />
      <option name="project" value="LOCAL" />
      <updated>1608586357047</updated>
    </task>
    <task id="LOCAL-00629" summary="Remove complicated code for detecting whether two line segments intersect or not">
      <created>1608588218767</created>
      <option name="number" value="00629" />
      <option name="presentableId" value="LOCAL-00629" />
      <option name="project" value="LOCAL" />
      <updated>1608588218767</updated>
    </task>
    <task id="LOCAL-00630" summary="Solve easy find the no of tuples f(x,y) that equals z, assuming the function is strictly increasing using binary search.&#10;&#10;First apply binary search to find the last valid x f(x,1) &lt;= z, then fix x and apply binary search on y.&#10;&#10;This can be optimized in o(x+y) if I visualize the problem as a 2D matrix of sorted row and sorted column">
      <created>1608658750163</created>
      <option name="number" value="00630" />
      <option name="presentableId" value="LOCAL-00630" />
      <option name="project" value="LOCAL" />
      <updated>1608658750163</updated>
    </task>
    <task id="LOCAL-00631" summary="Add related problems in medium and extremely trick find number of subarrays with odd sum by using prefix sum and counting even and odd prefixes">
      <created>1608659386448</created>
      <option name="number" value="00631" />
      <option name="presentableId" value="LOCAL-00631" />
      <option name="project" value="LOCAL" />
      <updated>1608659386448</updated>
    </task>
    <task id="LOCAL-00632" summary="Solve medium find the nearest right node in binary tree using DFS and keeping track of the current level.">
      <created>1608659905183</created>
      <option name="number" value="00632" />
      <option name="presentableId" value="LOCAL-00632" />
      <option name="project" value="LOCAL" />
      <updated>1608659905183</updated>
    </task>
    <task id="LOCAL-00633" summary="Solve medium find all the processes that needs to be killed if we kill a parent process by creating a directed graph of parent -&gt; child processes.">
      <created>1608667952482</created>
      <option name="number" value="00633" />
      <option name="presentableId" value="LOCAL-00633" />
      <option name="project" value="LOCAL" />
      <updated>1608667952483</updated>
    </task>
    <task id="LOCAL-00634" summary="Add another question that indirectly uses LCS as a way to solve it.&#10;&#10;When given two array and need to transform one array into another by using some moves, try using LCS.">
      <created>1608726181836</created>
      <option name="number" value="00634" />
      <option name="presentableId" value="LOCAL-00634" />
      <option name="project" value="LOCAL" />
      <updated>1608726181836</updated>
    </task>
    <task id="LOCAL-00635" summary="Solve hard and extremely trick problem find the min cost to connect all the villages, provided you can dig a well at each village independently.&#10;&#10;Trick was to create a hidden node and connect it with all the villages with edge cost as wells[i]. Then proceed with creating a MST from the graph until all nodes including the hidden nodes are visited.">
      <created>1608728550156</created>
      <option name="number" value="00635" />
      <option name="presentableId" value="LOCAL-00635" />
      <option name="project" value="LOCAL" />
      <updated>1608728550157</updated>
    </task>
    <task id="LOCAL-00636" summary="Solve medium connect all cities with min cost using Kruskal algorithm to create MST. Kruskal is based on union find algorithm in which we sort all the edges and start performing union operation on sorted edges.">
      <created>1608729764219</created>
      <option name="number" value="00636" />
      <option name="presentableId" value="LOCAL-00636" />
      <option name="project" value="LOCAL" />
      <updated>1608729764219</updated>
    </task>
    <task id="LOCAL-00637" summary="Solve medium and a bit tricky detect cycle in a directed graph by maintaining 3 states for each node (Unknown, Safe, Unsafe). This is similar to maintaining 3 arrays, toDo[], visited[], state[]&#10;&#10;Leveraged prior learning of detecting cycle during topological sort. Using enum cleans up the code a lot.">
      <created>1608735764642</created>
      <option name="number" value="00637" />
      <option name="presentableId" value="LOCAL-00637" />
      <option name="project" value="LOCAL" />
      <updated>1608735764642</updated>
    </task>
    <task id="LOCAL-00638" summary="Solve medium and extremely tricky problem find the number of free regions cut up slashes in empty grid by considering the grid as an image and upscaling the provided grid to 3 times the input size. This makes identifying the border easy.&#10;Once upscaling is done, perform DFS to identify no of islands.">
      <created>1608755758960</created>
      <option name="number" value="00638" />
      <option name="presentableId" value="LOCAL-00638" />
      <option name="project" value="LOCAL" />
      <updated>1608755758960</updated>
    </task>
    <task id="LOCAL-00639" summary="Solve medium and tricky problem (if using DSU as an optimization) find whether two sentences are similar or not if each word in a sentence can be transformed to corresponding word in another sentence if the words are connected&#10;&#10;DFS or Union Find can be used to find whether two words are connected, DSU performs better!">
      <created>1608758037051</created>
      <option name="number" value="00639" />
      <option name="presentableId" value="LOCAL-00639" />
      <option name="project" value="LOCAL" />
      <updated>1608758037051</updated>
    </task>
    <task id="LOCAL-00640" summary="Solve hard find whether the frog can reach the end by jumping k, k-1 or k+1 steps (k here is the last jump performed, initially k = 1) by using recursion + memoization&#10;&#10;Thought this would be a tough problem but was pleasantly surprised.">
      <created>1608814542128</created>
      <option name="number" value="00640" />
      <option name="presentableId" value="LOCAL-00640" />
      <option name="project" value="LOCAL" />
      <updated>1608814542128</updated>
    </task>
    <task id="LOCAL-00641" summary="Solve medium find the maximum length of increasing pairs by solving it similar to LIS or by considering it as an interval scheduling problem&#10;&#10;Learnings -- When provided a set of points, sometimes it's simpler to solve if we visualize it as an interval scheduling problem.">
      <created>1608815942136</created>
      <option name="number" value="00641" />
      <option name="presentableId" value="LOCAL-00641" />
      <option name="project" value="LOCAL" />
      <updated>1608815942137</updated>
    </task>
    <task id="LOCAL-00642" summary="Solve medium and tricky find all the strobogrammatic numbers of a specific length using recursion&#10;&#10;Leveraged prior learnings of solving ConfusingNumber that only digits 0,1,6,8,9 can contribute to a valid number.">
      <created>1608829992350</created>
      <option name="number" value="00642" />
      <option name="presentableId" value="LOCAL-00642" />
      <option name="project" value="LOCAL" />
      <updated>1608829992351</updated>
    </task>
    <task id="LOCAL-00643" summary="Solve hard and extremely tricky digit dp question, find all the numbers that can be formed from a set of valid digit and is &lt; target number &#10;&#10;Solved it on my own after watching Kartik's video on Digit DP. Only thing different in this question is to perform computation for lengths of all strings of 1,2,3..(target.length).&#10;&#10;Gave myself a pat on the back.">
      <created>1608844278127</created>
      <option name="number" value="00643" />
      <option name="presentableId" value="LOCAL-00643" />
      <option name="project" value="LOCAL" />
      <updated>1608844278127</updated>
    </task>
    <task id="LOCAL-00644" summary="Solve medium and tricky digit dp problem, find the count of numbers with unique digit &lt; 10^x. &#10;It was more of a math related problem rather than DP. Initially we have 10 choices and as we fix numbers, we are left with one less choice. Special case for first digit as it can't have 0.">
      <created>1608848942495</created>
      <option name="number" value="00644" />
      <option name="presentableId" value="LOCAL-00644" />
      <option name="project" value="LOCAL" />
      <updated>1608848942495</updated>
    </task>
    <task id="LOCAL-00645" summary="Solve medium find the zig-zag diagonal traversal of a matrix by leveraging all elements of same diagonals have same identifier, either row+col or row-col.">
      <created>1608904076492</created>
      <option name="number" value="00645" />
      <option name="presentableId" value="LOCAL-00645" />
      <option name="project" value="LOCAL" />
      <updated>1608904076492</updated>
    </task>
    <task id="LOCAL-00646" summary="Solve medium and tricky find single element in sorted array such that all other elements repeat twice using binary search.&#10;&#10;Trick was to note that numbers on the left side of the target have even and odd indices with same value whereas on the right, odd and even indices have the same value. Use this fact to reduce this to T,T,T,F,F,F,F along with handling edge cases when target is the first or last element of the array.">
      <created>1608917839574</created>
      <option name="number" value="00646" />
      <option name="presentableId" value="LOCAL-00646" />
      <option name="project" value="LOCAL" />
      <updated>1608917839575</updated>
    </task>
    <task id="LOCAL-00647" summary="Add gotcha around resetting the tank to 0, if current station has negative tank at current index i.e gas[i] - cost[i] is negative">
      <created>1608925041503</created>
      <option name="number" value="00647" />
      <option name="presentableId" value="LOCAL-00647" />
      <option name="project" value="LOCAL" />
      <updated>1608925041503</updated>
    </task>
    <task id="LOCAL-00648" summary="Solve medium and extremely tricky find the maximum index you can reach provided a set of bricks and ladders. Given constraint screams of greedy. Trick was to use ladders at the current place or at some previous place, whichever gives the most amount of bricks back.&#10;This travel back in time and correct the mistake is a new pattern which I am seeing today.">
      <created>1608926456682</created>
      <option name="number" value="00648" />
      <option name="presentableId" value="LOCAL-00648" />
      <option name="project" value="LOCAL" />
      <updated>1608926456682</updated>
    </task>
    <task id="LOCAL-00649" summary="Solve easy find the count of substrings with only one distinct letter by counting the length of the longest substring with only one distinct letter and then breaking it down into smaller substrings.">
      <created>1609008952270</created>
      <option name="number" value="00649" />
      <option name="presentableId" value="LOCAL-00649" />
      <option name="project" value="LOCAL" />
      <updated>1609008952270</updated>
    </task>
    <task id="LOCAL-00650" summary="Solve hard and a bit tricky find the min jumps required to reach the last index given that you can jump to i-1, i+1 or any other index with the same value using BFS and biDirectional BFS&#10;&#10;Learnings -- Finally implemented Bidirectional BFS after keeping it in my todo, keep alternating between forward queue and backward queue by performing size check and remember to check whether any neighbour of current node exists in other queue or not.">
      <created>1609069499293</created>
      <option name="number" value="00650" />
      <option name="presentableId" value="LOCAL-00650" />
      <option name="project" value="LOCAL" />
      <updated>1609069499293</updated>
    </task>
    <task id="LOCAL-00651" summary="Solve medium and tricky find the min no of moves required by knight to reach a target cell using bidirectional bfs. Normal BFS times out. Can be solved in O(1) using maths :D but that's too tough to solve in interview.&#10;&#10;Leveraged prior learnings of using bidirectional BFS.">
      <created>1609072219479</created>
      <option name="number" value="00651" />
      <option name="presentableId" value="LOCAL-00651" />
      <option name="project" value="LOCAL" />
      <updated>1609072219479</updated>
    </task>
    <task id="LOCAL-00652" summary="Add clarification around why sorting is required because we need to pick a set of valid envelopes, rather than a subsequence">
      <created>1609074328537</created>
      <option name="number" value="00652" />
      <option name="presentableId" value="LOCAL-00652" />
      <option name="project" value="LOCAL" />
      <updated>1609074328537</updated>
    </task>
    <task id="LOCAL-00653" summary="Solve easy find whether a number is strobogrammatic or not using two pointers. Remember that only 0,1,6,8,9 can contribute to a number being valid">
      <created>1609078933642</created>
      <option name="number" value="00653" />
      <option name="presentableId" value="LOCAL-00653" />
      <option name="project" value="LOCAL" />
      <updated>1609078933642</updated>
    </task>
    <task id="LOCAL-00654" summary="Solve hard and extremely tricky find count of confusing numbers &lt;= n, a number is said to be confusing, if it's rotated 180 deg it's still valid but it should be different than input number &#10;&#10;Initially I solved it with backtracking by fixing digits one at a time using [0,1,6,8,9]. Took ~600 ms.&#10;Then found all the valid numbers with digit [0,1,6,8,9] &lt;= n. Then found strobogrammatic numbers &lt;= n. Result is a - b.&#10;This hard problem is combination of two hard problems. EPIC !">
      <created>1609104431967</created>
      <option name="number" value="00654" />
      <option name="presentableId" value="LOCAL-00654" />
      <option name="project" value="LOCAL" />
      <updated>1609104431967</updated>
    </task>
    <task id="LOCAL-00655" summary="Solve hard and extremely tricky find all strobogrammatic numbers that lies within a range low &lt;= x &lt;= high by fixing pairwise digits and checking whether the string generated at the end is within bounds. &#10;&#10;I honestly thought it would take a lot of time but I was pleasantly surprised. Digit DP is a bit tough to understand but it's surprisingly fast.">
      <created>1609105309449</created>
      <option name="number" value="00655" />
      <option name="presentableId" value="LOCAL-00655" />
      <option name="project" value="LOCAL" />
      <updated>1609105309449</updated>
    </task>
    <task id="LOCAL-00656" summary="Solve hard and extremely tricky find whether it's possible to reach the last index from current index, if we can jump to some specific indices during odd/even numbered jumps. Trickiest part was to compute those indices. After that, it was just regular DFS.&#10;&#10;Learnings -- When asked to find valid indices on the right such that it is not restricted to finding the first valid number on the right, it might be better to traverse from the right instead. I was trying to iterate from the left using monotonic stack but couldn't make it work.">
      <created>1609187665288</created>
      <option name="number" value="00656" />
      <option name="presentableId" value="LOCAL-00656" />
      <option name="project" value="LOCAL" />
      <updated>1609187665288</updated>
    </task>
    <task id="LOCAL-00657" summary="Solve hard and extremely tricky find the least numbers of transactions required to settle debts among friends by using backtracking !&#10;&#10;Learnings -- Although GFG solutions proposes Greedy solution for this but Leetcode articles prove that it's a NP Problem in which we have to check all combinations by trying to settle one person at a time by transferring one's debt/credit to another with credit/debt (opposing credit) and recurring.">
      <created>1609193673894</created>
      <option name="number" value="00657" />
      <option name="presentableId" value="LOCAL-00657" />
      <option name="project" value="LOCAL" />
      <updated>1609193673894</updated>
    </task>
    <option name="localTasksCounter" value="658" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="1">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="roots">
                    <value>
                      <list>
                        <option value="$PROJECT_DIR$" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="2">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="roots">
                    <value>
                      <list>
                        <option value="$PROJECT_DIR$" />
                      </list>
                    </value>
                  </entry>
                  <entry key="text">
                    <value>
                      <list>
                        <option value="hard and tricky" />
                      </list>
                    </value>
                  </entry>
                  <entry key="user">
                    <value>
                      <list>
                        <option value="snehasishiiita" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="text">
                    <value>
                      <list>
                        <option value="backtracking" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
              <option name="COLUMN_ID_WIDTH">
                <map>
                  <entry key="Table.Default.Date.ColumnIdWidth" value="119" />
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT" value="true" />
    <MESSAGE value="Solve medium find all the processes that needs to be killed if we kill a parent process by creating a directed graph of parent -&gt; child processes." />
    <MESSAGE value="Add another question that indirectly uses LCS as a way to solve it.&#10;&#10;When given two array and need to transform one array into another by using some moves, try using LCS." />
    <MESSAGE value="Solve hard and extremely trick problem find the min cost to connect all the villages, provided you can dig a well at each village independently.&#10;&#10;Trick was to create a hidden node and connect it with all the villages with edge cost as wells[i]. Then proceed with creating a MST from the graph until all nodes including the hidden nodes are visited." />
    <MESSAGE value="Solve medium connect all cities with min cost using Kruskal algorithm to create MST. Kruskal is based on union find algorithm in which we sort all the edges and start performing union operation on sorted edges." />
    <MESSAGE value="Solve medium and a bit tricky detect cycle in a directed graph by maintaining 3 states for each node (Unknown, Safe, Unsafe). This is similar to maintaining 3 arrays, toDo[], visited[], state[]&#10;&#10;Leveraged prior learning of detecting cycle during topological sort. Using enum cleans up the code a lot." />
    <MESSAGE value="Solve medium and extremely tricky problem find the number of free regions cut up slashes in empty grid by considering the grid as an image and upscaling the provided grid to 3 times the input size. This makes identifying the border easy.&#10;Once upscaling is done, perform DFS to identify no of islands." />
    <MESSAGE value="Solve medium and tricky problem (if using DSU as an optimization) find whether two sentences are similar or not if each word in a sentence can be transformed to corresponding word in another sentence if the words are connected&#10;&#10;DFS or Union Find can be used to find whether two words are connected, DSU performs better!" />
    <MESSAGE value="Solve hard find whether the frog can reach the end by jumping k, k-1 or k+1 steps (k here is the last jump performed, initially k = 1) by using recursion + memoization&#10;&#10;Thought this would be a tough problem but was pleasantly surprised." />
    <MESSAGE value="Solve medium find the maximum length of increasing pairs by solving it similar to LIS or by considering it as an interval scheduling problem&#10;&#10;Learnings -- When provided a set of points, sometimes it's simpler to solve if we visualize it as an interval scheduling problem." />
    <MESSAGE value="Solve medium and tricky find all the strobogrammatic numbers of a specific length using recursion&#10;&#10;Leveraged prior learnings of solving ConfusingNumber that only digits 0,1,6,8,9 can contribute to a valid number." />
    <MESSAGE value="Solve hard and extremely tricky digit dp question, find all the numbers that can be formed from a set of valid digit and is &lt; target number &#10;&#10;Solved it on my own after watching Kartik's video on Digit DP. Only thing different in this question is to perform computation for lengths of all strings of 1,2,3..(target.length).&#10;&#10;Gave myself a pat on the back." />
    <MESSAGE value="Solve medium and tricky digit dp problem, find the count of numbers with unique digit &lt; 10^x. &#10;It was more of a math related problem rather than DP. Initially we have 10 choices and as we fix numbers, we are left with one less choice. Special case for first digit as it can't have 0." />
    <MESSAGE value="Solve medium find the zig-zag diagonal traversal of a matrix by leveraging all elements of same diagonals have same identifier, either row+col or row-col." />
    <MESSAGE value="Solve medium and tricky find single element in sorted array such that all other elements repeat twice using binary search.&#10;&#10;Trick was to note that numbers on the left side of the target have even and odd indices with same value whereas on the right, odd and even indices have the same value. Use this fact to reduce this to T,T,T,F,F,F,F along with handling edge cases when target is the first or last element of the array.&#10;While solving binary search cases, consider each index as mid and try to solve it." />
    <MESSAGE value="Add gotcha around resetting the tank to 0, if current station has negative tank at current index i.e gas[i] - cost[i] is negative" />
    <MESSAGE value="Solve medium and extremely tricky find the maximum index you can reach provided a set of bricks and ladders. Given constraint screams of greedy. Trick was to use ladders at the current place or at some previous place, whichever gives the most amount of bricks back.&#10;This travel back in time and correct the mistake is a new pattern which I am seeing today." />
    <MESSAGE value="Solve easy find the count of substrings with only one distinct letter by counting the length of the longest substring with only one distinct letter and then breaking it down into smaller substrings." />
    <MESSAGE value="Solve hard and a bit tricky find the min jumps required to reach the last index given that you can jump to i-1, i+1 or any other index with the same value using BFS and biDirectional BFS&#10;&#10;Learnings -- Finally implemented Bidirectional BFS after keeping it in my todo, keep alternating between forward queue and backward queue by performing size check and remember to check whether any neighbour of current node exists in other queue or not." />
    <MESSAGE value="Solve medium and tricky find the min no of moves required by knight to reach a target cell using bidirectional bfs. Normal BFS times out. Can be solved in O(1) using maths :D but that's too tough to solve in interview.&#10;&#10;Leveraged prior learnings of using bidirectional BFS." />
    <MESSAGE value="Add clarification around why sorting is required because we need to pick a set of valid envelopes, rather than a subsequence" />
    <MESSAGE value="Solve easy find whether a number is strobogrammatic or not using two pointers. Remember that only 0,1,6,8,9 can contribute to a number being valid" />
    <MESSAGE value="Solve hard and extremely tricky find count of confusing numbers &lt;= n, a number is said to be confusing, if it's rotated 180 deg it's still valid but it should be different than input number &#10;&#10;Initially I solved it with backtracking by fixing digits one at a time using [0,1,6,8,9]. Took ~600 ms.&#10;Then found all the valid numbers with digit [0,1,6,8,9] &lt;= n. Then found strobogrammatic numbers &lt;= n. Result is a - b.&#10;This hard problem is combination of two hard problems. EPIC !" />
    <MESSAGE value="Solve hard and extremely tricky find all strobogrammatic numbers that lies within a range low &lt;= x &lt;= high by fixing pairwise digits and checking whether the string generated at the end is within bounds. &#10;&#10;I honestly thought it would take a lot of time but I was pleasantly surprised. Digit DP is a bit tough to understand but it's surprisingly fast." />
    <MESSAGE value="Solve hard and extremely tricky find whether it's possible to reach the last index from current index, if we can jump to some specific indices during odd/even numbered jumps. Trickiest part was to compute those indices. After that, it was just regular DFS.&#10;&#10;Learnings -- When asked to find valid indices on the right such that it is not restricted to finding the first valid number on the right, it might be better to traverse from the right instead. I was trying to iterate from the left using monotonic stack but couldn't make it work." />
    <MESSAGE value="Solve hard and extremely tricky find the least numbers of transactions required to settle debts among friends by using backtracking !&#10;&#10;Learnings -- Although GFG solutions proposes Greedy solution for this but Leetcode articles prove that it's a NP Problem in which we have to check all combinations by trying to settle one person at a time by transferring one's debt/credit to another with credit/debt (opposing credit) and recurring." />
    <option name="LAST_COMMIT_MESSAGE" value="Solve hard and extremely tricky find the least numbers of transactions required to settle debts among friends by using backtracking !&#10;&#10;Learnings -- Although GFG solutions proposes Greedy solution for this but Leetcode articles prove that it's a NP Problem in which we have to check all combinations by trying to settle one person at a time by transferring one's debt/credit to another with credit/debt (opposing credit) and recurring." />
    <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REARRANGE_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/DistinctSubsequences.java</url>
          <line>78</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/SortColors.java</url>
          <line>29</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/GeneralizedAbbreviations.java</url>
          <line>33</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
      </breakpoints>
      <default-breakpoints>
        <breakpoint enabled="true" type="java-exception">
          <condition expression="this instanceof StringIndexOutOfBoundsException" language="JAVA" />
          <properties>
            <catch-class-filters>
              <class-filter pattern="java.lang.ArrayIndexOutOfBoundsException" />
            </catch-class-filters>
          </properties>
        </breakpoint>
      </default-breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="JUnit">
        <watch expression="grid" />
        <watch expression="uniqueString.entrySet().toArray()[0]" />
      </configuration>
    </watches-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>