<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="BranchesTreeState">
    <expand />
    <select>
      <path>
        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
        <item name="LOCAL_ROOT" type="e8cecc67:BranchNodeDescriptor" />
      </path>
    </select>
  </component>
  <component name="ChangeListManager">
    <list default="true" id="7dbb84ff-cb70-4f33-84ac-c2138746d980" name="Default Changelist" comment="Solve medium and a bit tricky problem, find the maximum length of concatenated string such that it does not contain any duplicate char using bitmasking + backtracking.&#10;&#10;Leveraged prior learning of using bitmasking to find common characters in strings and then applied backtracking by either choos">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/MaximumProductOfWordLengths.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/MaximumProductOfWordLengths.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/MinimumMovesToEqualArrayElements.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/MinimumMovesToEqualArrayElements.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="DefaultGradleProjectSettings">
    <option name="isMigrated" value="true" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="JUnit5 Test Class" />
        <option value="FxmlFile" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Pull.Settings">
    <option name="OPTIONS">
      <set>
        <option value="REBASE" />
      </set>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="que" />
      </list>
    </option>
    <option name="PUSH_AUTO_UPDATE" value="true" />
    <option name="PUSH_TAGS">
      <GitPushTagMode>
        <option name="argument" value="--tags" />
        <option name="title" value="All" />
      </GitPushTagMode>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitSEFilterConfiguration">
    <file-type-list>
      <filtered-out-file-type name="LOCAL_BRANCH" />
      <filtered-out-file-type name="REMOTE_BRANCH" />
      <filtered-out-file-type name="TAG" />
      <filtered-out-file-type name="COMMIT_BY_MESSAGE" />
    </file-type-list>
  </component>
  <component name="GithubPullRequestsUISettings">
    <option name="hiddenUrls">
      <set>
        <option value="https://github.com/snehasishroy/leetcode-practice.git" />
      </set>
    </option>
  </component>
  <component name="MavenImportPreferences">
    <option name="importingSettings">
      <MavenImportingSettings>
        <option name="vmOptionsForImporter" value="-Xmx768m" />
      </MavenImportingSettings>
    </option>
  </component>
  <component name="ProjectId" id="1OYjUozR2wA5XfxN4lSupdXEdA9" />
  <component name="ProjectLevelVcsManager">
    <ConfirmationsSetting value="1" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
    <option name="showMembers" value="true" />
  </component>
  <component name="PropertiesComponent">
    <property name="Downloaded.Files.Path.Enabled" value="false" />
    <property name="Repository.Attach.Annotations" value="true" />
    <property name="Repository.Attach.JavaDocs" value="true" />
    <property name="Repository.Attach.Sources" value="true" />
    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
    <property name="SHARE_PROJECT_CONFIGURATION_FILES" value="true" />
    <property name="ToolWindowRun.ShowToolbar" value="false" />
    <property name="com.intellij.ide.scratch.LRUPopupBuilder$1/New Scratch File" value="JAVA" />
    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary" value="JUnit5" />
    <property name="com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5" value="" />
    <property name="extract.method.default.visibility" value="private" />
    <property name="last.edited.regexp" value="/abc/def/fef" />
    <property name="last_directory_selection" value="$PROJECT_DIR$/src/main/java/common" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="node.js.detected.package.eslint" value="true" />
    <property name="node.js.detected.package.tslint" value="true" />
    <property name="node.js.path.for.package.eslint" value="project" />
    <property name="node.js.path.for.package.tslint" value="project" />
    <property name="node.js.selected.package.eslint" value="(autodetect)" />
    <property name="node.js.selected.package.tslint" value="(autodetect)" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="restartRequiresConfirmation" value="false" />
    <property name="settings.editor.selected.configurable" value="editor.preferences.fonts.default" />
  </component>
  <component name="RebelAgentSelection">
    <selection>jr</selection>
  </component>
  <component name="RecentsManager">
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\BeTheRebel\IdeaProjects\leetcode-practice\src\main\java\experience\apna" />
    </key>
    <key name="MoveClassesOrPackagesDialog.RECENTS_KEY">
      <recent name="" />
      <recent name="alternate" />
      <recent name="common" />
    </key>
    <key name="MoveInnerDialog.RECENTS_KEY">
      <recent name="common" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="" />
    </key>
    <key name="CopyClassDialog.RECENTS_KEY">
      <recent name="" />
    </key>
  </component>
  <component name="RunManager" selected="Java Scratch.Scratch">
    <configuration default="true" type="ArquillianJUnit" factoryName="" nameIsGenerated="true">
      <option name="arquillianRunConfiguration">
        <value>
          <option name="containerStateName" value="" />
        </value>
      </option>
      <option name="TEST_OBJECT" value="class" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="DivideChocolates" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="DivideChocolates" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="InventoryManagement" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="experience.meesho.InventoryManagement" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="JumpGame4" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="JumpGame4" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="LFUCache" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="LFUCache" />
      <module name="leetcode-practice" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Unnamed" type="JUnit" factoryName="JUnit" nameIsGenerated="true">
      <module name="leetcode-practice" />
      <option name="MAIN_CLASS_NAME" value="" />
      <option name="METHOD_NAME" value="" />
      <option name="TEST_OBJECT" value="class" />
      <option name="PARAMETERS" value="" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Scratch" type="Java Scratch" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Scratch" />
      <option name="SCRATCH_FILE_URL" value="file://$APPLICATION_CONFIG_DIR$/scratches/scratch.java" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <list>
      <item itemvalue="Application.DivideChocolates" />
      <item itemvalue="Application.InventoryManagement" />
      <item itemvalue="Application.JumpGame4" />
      <item itemvalue="Application.LFUCache" />
      <item itemvalue="Java Scratch.Scratch" />
      <item itemvalue="JUnit.Unnamed" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Java Scratch.Scratch" />
        <item itemvalue="Application.LFUCache" />
        <item itemvalue="Application.JumpGame4" />
        <item itemvalue="Application.InventoryManagement" />
        <item itemvalue="Application.DivideChocolates" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="project-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="7dbb84ff-cb70-4f33-84ac-c2138746d980" name="Default Changelist" comment="" />
      <created>1561288929632</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1561288929632</updated>
    </task>
    <task id="LOCAL-00856" summary="Add related sliding window problems of fixed size">
      <created>1617823143035</created>
      <option name="number" value="00856" />
      <option name="presentableId" value="LOCAL-00856" />
      <option name="project" value="LOCAL" />
      <updated>1617823143035</updated>
    </task>
    <task id="LOCAL-00857" summary="Add Upstox interview experience.">
      <created>1617824826391</created>
      <option name="number" value="00857" />
      <option name="presentableId" value="LOCAL-00857" />
      <option name="project" value="LOCAL" />
      <updated>1617824826391</updated>
    </task>
    <task id="LOCAL-00858" summary="Solve medium find inorder successor in a BST using recursion and leveraging property of BST.">
      <created>1617906317786</created>
      <option name="number" value="00858" />
      <option name="presentableId" value="LOCAL-00858" />
      <option name="project" value="LOCAL" />
      <updated>1617906317786</updated>
    </task>
    <task id="LOCAL-00859" summary="Solve medium and a bit tricky find inorder successor in a BST where direct node access is provided instead of root access.&#10;&#10;Trick was to break down the problem into multiple cases, one where node has right child and one where it does not.&#10;In case of no right child, you have to walk up the tree to find a parent whose value is greater than current node value.">
      <created>1617908324806</created>
      <option name="number" value="00859" />
      <option name="presentableId" value="LOCAL-00859" />
      <option name="project" value="LOCAL" />
      <updated>1617908324806</updated>
    </task>
    <task id="LOCAL-00860" summary="Solve medium find the sum of nodes present at the deepest level in a binary tree using 2 pass. First pass to find the deepest level and second pass to find sum of nodes at that level.">
      <created>1617909905461</created>
      <option name="number" value="00860" />
      <option name="presentableId" value="LOCAL-00860" />
      <option name="project" value="LOCAL" />
      <updated>1617909905461</updated>
    </task>
    <task id="LOCAL-00861" summary="Solve easy find count of visits to all subdomains of a website by maintaining a hashmap of domain to their frequency.">
      <created>1617998165321</created>
      <option name="number" value="00861" />
      <option name="presentableId" value="LOCAL-00861" />
      <option name="project" value="LOCAL" />
      <updated>1617998165321</updated>
    </task>
    <task id="LOCAL-00862" summary="Add Upstox final round interview experience with Director">
      <created>1618153676973</created>
      <option name="number" value="00862" />
      <option name="presentableId" value="LOCAL-00862" />
      <option name="project" value="LOCAL" />
      <updated>1618153676973</updated>
    </task>
    <task id="LOCAL-00863" summary="Add Hotstar Bar Raiser interview experience with Director.">
      <created>1618154753527</created>
      <option name="number" value="00863" />
      <option name="presentableId" value="LOCAL-00863" />
      <option name="project" value="LOCAL" />
      <updated>1618154753527</updated>
    </task>
    <task id="LOCAL-00864" summary="Add simplified solution which uses custom comparator for sorting and update the existing code to use insertion sort instead as it's much easier to visualize.">
      <created>1618158548221</created>
      <option name="number" value="00864" />
      <option name="presentableId" value="LOCAL-00864" />
      <option name="project" value="LOCAL" />
      <updated>1618158548221</updated>
    </task>
    <task id="LOCAL-00865" summary="Add input constraints in problem statement">
      <created>1618159342769</created>
      <option name="number" value="00865" />
      <option name="presentableId" value="LOCAL-00865" />
      <option name="project" value="LOCAL" />
      <updated>1618159342769</updated>
    </task>
    <task id="LOCAL-00866" summary="Clarify problem statement and add comment">
      <created>1618159984600</created>
      <option name="number" value="00866" />
      <option name="presentableId" value="LOCAL-00866" />
      <option name="project" value="LOCAL" />
      <updated>1618159984600</updated>
    </task>
    <task id="LOCAL-00867" summary="Solve hard design in-memory file system and support ls(), mkdir(), cat() and echo() by modelling the file system as a n-ary tree.&#10;&#10;Was able to solve this question in 30 minutes :)">
      <created>1618163358784</created>
      <option name="number" value="00867" />
      <option name="presentableId" value="LOCAL-00867" />
      <option name="project" value="LOCAL" />
      <updated>1618163358784</updated>
    </task>
    <task id="LOCAL-00868" summary="Add approach in DivideArrayInSetsOfKConsecutiveNumbers">
      <created>1618347585836</created>
      <option name="number" value="00868" />
      <option name="presentableId" value="LOCAL-00868" />
      <option name="project" value="LOCAL" />
      <updated>1618347585836</updated>
    </task>
    <task id="LOCAL-00869" summary="Solve medium reorder a linked list">
      <created>1618422596818</created>
      <option name="number" value="00869" />
      <option name="presentableId" value="LOCAL-00869" />
      <option name="project" value="LOCAL" />
      <updated>1618422596818</updated>
    </task>
    <task id="LOCAL-00870" summary="Solve medium and extremely trick to solve in O(1) space using iterative traversal using stack, flatten a nested list.&#10;&#10;Was not able to solve it in O(1) space on my own. Failure after a long time. Still a long way to go.">
      <created>1618517248307</created>
      <option name="number" value="00870" />
      <option name="presentableId" value="LOCAL-00870" />
      <option name="project" value="LOCAL" />
      <updated>1618517248307</updated>
    </task>
    <task id="LOCAL-00871" summary="Solve medium flatten a 2D vector iteratively using two pointers, one tracking the outer index and one tracking the inner index.&#10;&#10;Leveraged prior learning of solving iterator problem in FlattenNestedListIterator">
      <created>1618602587372</created>
      <option name="number" value="00871" />
      <option name="presentableId" value="LOCAL-00871" />
      <option name="project" value="LOCAL" />
      <updated>1618602587372</updated>
    </task>
    <task id="LOCAL-00872" summary="Solve medium design a zig zag iterator that cycles over k lists by maintaining a queue of iterators.&#10;&#10;Push back the current head back at the end if the current iterator has still some elements left.">
      <created>1618604790966</created>
      <option name="number" value="00872" />
      <option name="presentableId" value="LOCAL-00872" />
      <option name="project" value="LOCAL" />
      <updated>1618604790966</updated>
    </task>
    <task id="LOCAL-00873" summary="Solve medium find the number of points that lies inside a circle using brute force.">
      <created>1618676044630</created>
      <option name="number" value="00873" />
      <option name="presentableId" value="LOCAL-00873" />
      <option name="project" value="LOCAL" />
      <updated>1618676044630</updated>
    </task>
    <task id="LOCAL-00874" summary="Solve medium and a bit tricky find the k that maximizes the running xor for the given array by leveraging the fact that xor is complement of itself.&#10;&#10;Leveraged prior learning of solving XORQueriesOfSubarray">
      <created>1618677199552</created>
      <option name="number" value="00874" />
      <option name="presentableId" value="LOCAL-00874" />
      <option name="project" value="LOCAL" />
      <updated>1618677199552</updated>
    </task>
    <task id="LOCAL-00875" summary="Solve medium design a Trie data structure that support insert(), search() and startsWith()&#10;&#10;Remember to use Trie in problems that deals with prefixes of strings.">
      <created>1618677490280</created>
      <option name="number" value="00875" />
      <option name="presentableId" value="LOCAL-00875" />
      <option name="project" value="LOCAL" />
      <updated>1618677490280</updated>
    </task>
    <task id="LOCAL-00876" summary="Update Compass interview feedback">
      <created>1618687900554</created>
      <option name="number" value="00876" />
      <option name="presentableId" value="LOCAL-00876" />
      <option name="project" value="LOCAL" />
      <updated>1618687900554</updated>
    </task>
    <task id="LOCAL-00877" summary="Update feedback of Apna HLD round">
      <created>1618688126351</created>
      <option name="number" value="00877" />
      <option name="presentableId" value="LOCAL-00877" />
      <option name="project" value="LOCAL" />
      <updated>1618688126351</updated>
    </task>
    <task id="LOCAL-00878" summary="Solve medium implement a Trie data structure that supports countWordsEqualTo() and countWordsStartingWith() and erase() methods.&#10;&#10;Leveraged prior learnings of storing useful information directly in nodes of Trie. Care must be taken while performing erase() to actually remove the nodes instead of just decrementing the count.">
      <created>1618836038710</created>
      <option name="number" value="00878" />
      <option name="presentableId" value="LOCAL-00878" />
      <option name="project" value="LOCAL" />
      <updated>1618836038710</updated>
    </task>
    <task id="LOCAL-00879" summary="Solve easy and extremely tricky find second minimum node in a binary tree using divide and conquer in O(height). Was not able to solve this on my own in O(height)&#10;&#10;Learnings: Use divide and conquer to find the min/max element in a tree along with using it in arithmetic expressions.">
      <created>1618842725408</created>
      <option name="number" value="00879" />
      <option name="presentableId" value="LOCAL-00879" />
      <option name="project" value="LOCAL" />
      <updated>1618842725408</updated>
    </task>
    <task id="LOCAL-00880" summary="Solve hard and a bit tricky problem find the minimum candies to give to people such that people with high ratings should be given more candies than their neighbours using two pass greedy solution.&#10;&#10;Leveraged prior learnings of solving mountain related problem using two passes.">
      <created>1618845394866</created>
      <option name="number" value="00880" />
      <option name="presentableId" value="LOCAL-00880" />
      <option name="project" value="LOCAL" />
      <updated>1618845394866</updated>
    </task>
    <task id="LOCAL-00881" summary="Add hint towards using prefix sum to find a subarray that has the target xor.">
      <created>1618932620470</created>
      <option name="number" value="00881" />
      <option name="presentableId" value="LOCAL-00881" />
      <option name="project" value="LOCAL" />
      <updated>1618932620470</updated>
    </task>
    <task id="LOCAL-00882" summary="Add hint towards using prefix sum to find a subarray that has the target xor.">
      <created>1618932692777</created>
      <option name="number" value="00882" />
      <option name="presentableId" value="LOCAL-00882" />
      <option name="project" value="LOCAL" />
      <updated>1618932692777</updated>
    </task>
    <task id="LOCAL-00883" summary="Add an optimized constant time solution for designing a MaxFrequencyStack by leveraging the fact that maxfrequency will be continuous">
      <created>1618938156968</created>
      <option name="number" value="00883" />
      <option name="presentableId" value="LOCAL-00883" />
      <option name="project" value="LOCAL" />
      <updated>1618938156968</updated>
    </task>
    <task id="LOCAL-00884" summary="Actually add the optimized solution for designing a MaxFrequencyStack">
      <created>1619021466050</created>
      <option name="number" value="00884" />
      <option name="presentableId" value="LOCAL-00884" />
      <option name="project" value="LOCAL" />
      <updated>1619021466050</updated>
    </task>
    <task id="LOCAL-00885" summary="Solve medium and a bit tricky problem, find the optimal index to place a line that intersects the least amount of bricks using greedy voting algorithm.">
      <created>1619201413671</created>
      <option name="number" value="00885" />
      <option name="presentableId" value="LOCAL-00885" />
      <option name="project" value="LOCAL" />
      <updated>1619201413671</updated>
    </task>
    <task id="LOCAL-00886" summary="Solve medium and a bit tricky problem, find the smallest cost to reach last row from first row in a triangle using DFS + Memoization.&#10;&#10;Learnings: I made the implementation complicated by solving it via Djikstra/Greedy instead of solving it via simple DFS + Memoization. Greedy would have been optimal in case the graph had cycles.">
      <created>1619207557011</created>
      <option name="number" value="00886" />
      <option name="presentableId" value="LOCAL-00886" />
      <option name="project" value="LOCAL" />
      <updated>1619207557011</updated>
    </task>
    <task id="LOCAL-00887" summary="Solve hard and extremely tricky design LFU cache using hashmap of key -&gt; node + Doubly linked list of frequency -&gt; set of nodes with the respective frequency.&#10;&#10;I was not able to fully solve this problem on my own. I was not able to cleanly implement how to find the smallest frequency and reshuffle nodes to +1 frequency node in DLL. &#10;Once I saw the paper, I was able to visualize it clearly and was able to implement it cleanly as well.">
      <created>1619270337843</created>
      <option name="number" value="00887" />
      <option name="presentableId" value="LOCAL-00887" />
      <option name="project" value="LOCAL" />
      <updated>1619270337843</updated>
    </task>
    <task id="LOCAL-00888" summary="Solve easy and extremely tricky to optimize space complexity, find two nodes in a BST whose value equals k using iterative BST traversal.&#10;&#10;Learnings: Iterative traversals are very tricky.">
      <created>1619275592983</created>
      <option name="number" value="00888" />
      <option name="presentableId" value="LOCAL-00888" />
      <option name="project" value="LOCAL" />
      <updated>1619275592984</updated>
    </task>
    <task id="LOCAL-00889" summary="Solve medium find two nodes in two BST that sums to target node using iterative traversals. Perform a inorder iterative traversal for the first tree and a reverse inorder iterative traversal for the second tree.&#10;&#10;Leveraged prior learning of doing iterative BST traversal.">
      <created>1619277852864</created>
      <option name="number" value="00889" />
      <option name="presentableId" value="LOCAL-00889" />
      <option name="project" value="LOCAL" />
      <updated>1619277852864</updated>
    </task>
    <task id="LOCAL-00890" summary="Solve medium balance a given BST using Divide and conquer. In order to reduce the space complexity to O(1) need to use DSW algorithm.">
      <created>1619284469634</created>
      <option name="number" value="00890" />
      <option name="presentableId" value="LOCAL-00890" />
      <option name="project" value="LOCAL" />
      <updated>1619284469634</updated>
    </task>
    <task id="LOCAL-00891" summary="Solve medium and extremely tricky to do in O(1) space, rotate an image clockwise 90 degrees in place by swapping the cells in group of 4's using recursion.&#10;&#10;Very happy to solve this question on my own in first attempt.">
      <created>1619546774053</created>
      <option name="number" value="00891" />
      <option name="presentableId" value="LOCAL-00891" />
      <option name="project" value="LOCAL" />
      <updated>1619546774053</updated>
    </task>
    <task id="LOCAL-00892" summary="Solve medium and a bit tricky problem, find the no of total hits on counters received in last 5 minutes using deque. &#10;&#10;In my initial implementation, I implemented the solution using custom binary search by writing upper_bound() and lower_bound() but the solution became simplified after knowing that the timestamps are sorted for both getHits() and hits(), so we can simply use a deque for storing elements.">
      <created>1619637109724</created>
      <option name="number" value="00892" />
      <option name="presentableId" value="LOCAL-00892" />
      <option name="project" value="LOCAL" />
      <updated>1619637109724</updated>
    </task>
    <task id="LOCAL-00893" summary="Solve medium and a bit tricky problem, find the kth largest element in an array using quick select algorithm.&#10;&#10;Trick was to select a random pivot between [low, high] to reduce worst case time complexity.">
      <created>1619641191143</created>
      <option name="number" value="00893" />
      <option name="presentableId" value="LOCAL-00893" />
      <option name="project" value="LOCAL" />
      <updated>1619641191143</updated>
    </task>
    <task id="LOCAL-00894" summary="Solve hard and extremely tricky to optimize, find whether a word with the provided suffix and prefix exists in dictionary or not using reverse indexes in trie.&#10;&#10;Trick was to generate all possible query patterns for a word and insert into trie ie. apple can be searched via &quot;apple|ap&quot;, &quot;ple|app&quot;, &quot;pple|ap&quot;. Don't forget to store useful information ie. index directly in trie node to avoid performing DFS.">
      <created>1619902264277</created>
      <option name="number" value="00894" />
      <option name="presentableId" value="LOCAL-00894" />
      <option name="project" value="LOCAL" />
      <updated>1619902264277</updated>
    </task>
    <task id="LOCAL-00895" summary="Solve medium find the smallest unreserved seat using treeset. &#10;&#10;Leveraged prior learning of solving seat allocation problem using ordered set.">
      <created>1619905070200</created>
      <option name="number" value="00895" />
      <option name="presentableId" value="LOCAL-00895" />
      <option name="project" value="LOCAL" />
      <updated>1619905070200</updated>
    </task>
    <task id="LOCAL-00896" summary="Solve medium and a bit tricky problem find min adjacent swaps required to reach kth smallest number by first finding the kth next permutation and then finding the min swaps by logic similar to insertion sort.">
      <created>1619982036363</created>
      <option name="number" value="00896" />
      <option name="presentableId" value="LOCAL-00896" />
      <option name="project" value="LOCAL" />
      <updated>1619982036363</updated>
    </task>
    <task id="LOCAL-00897" summary="Solve medium and extremely tricky to do in O(1) space using tricky recursion, find all the gray codes of n digits.&#10;&#10;Was able to do it on my own by maintaining a visited set and try flipping a bit.">
      <created>1620062949587</created>
      <option name="number" value="00897" />
      <option name="presentableId" value="LOCAL-00897" />
      <option name="project" value="LOCAL" />
      <updated>1620062949588</updated>
    </task>
    <task id="LOCAL-00898" summary="Solve medium and a bit tricky to optimize time and space complexity to O(n) and O(logn) by leveraging the inorder traversal of a sorted list to convert it to a balanced BST.">
      <created>1620309066961</created>
      <option name="number" value="00898" />
      <option name="presentableId" value="LOCAL-00898" />
      <option name="project" value="LOCAL" />
      <updated>1620309066961</updated>
    </task>
    <task id="LOCAL-00899" summary="Update class name to match problem statement name">
      <created>1620309970614</created>
      <option name="number" value="00899" />
      <option name="presentableId" value="LOCAL-00899" />
      <option name="project" value="LOCAL" />
      <updated>1620309970614</updated>
    </task>
    <task id="LOCAL-00900" summary="Solve medium and a bit tricky problem, split the array into at most k groups such that sum of averages is maximised using recursion + memoization. &#10;&#10;Do note that the largest average would be possible by splitting into maximum groups, so the problem statement reduces to split the array into k groups such that sum of averages is maximized.&#10;&#10;Leveraged past learnings of solving similar split array problems.">
      <created>1620402802760</created>
      <option name="number" value="00900" />
      <option name="presentableId" value="LOCAL-00900" />
      <option name="project" value="LOCAL" />
      <updated>1620402802760</updated>
    </task>
    <task id="LOCAL-00901" summary="Solve medium find the time required to fill memory sticks by consuming i bits every ith second using simulation.">
      <created>1621100675732</created>
      <option name="number" value="00901" />
      <option name="presentableId" value="LOCAL-00901" />
      <option name="project" value="LOCAL" />
      <updated>1621100675732</updated>
    </task>
    <task id="LOCAL-00902" summary="Solve medium and a bit tricky problem, find the box contents after rotating a box containing stones and stationary obstacles using two pointers.&#10;&#10;Leveraged previous learnings of simulating rotation using transpose + reverse.">
      <created>1621102744282</created>
      <option name="number" value="00902" />
      <option name="presentableId" value="LOCAL-00902" />
      <option name="project" value="LOCAL" />
      <updated>1621102744282</updated>
    </task>
    <task id="LOCAL-00903" summary="Solve medium find whether the provided strings match the provided pattern by maintaining a mapping from source to target and from target to source.&#10;&#10;Very similar to previously solved problems.">
      <created>1621619777669</created>
      <option name="number" value="00903" />
      <option name="presentableId" value="LOCAL-00903" />
      <option name="project" value="LOCAL" />
      <updated>1621619777670</updated>
    </task>
    <task id="LOCAL-00904" summary="Solve medium find the minimum path sum to reach any cell of last row from any cell in the first row using recursion + memoization.&#10;&#10;Leveraged prior learnings of directly using DP as the graph does not contain any cycles.">
      <created>1621620492059</created>
      <option name="number" value="00904" />
      <option name="presentableId" value="LOCAL-00904" />
      <option name="project" value="LOCAL" />
      <updated>1621620492059</updated>
    </task>
    <option name="localTasksCounter" value="905" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="1">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="roots">
                    <value>
                      <list>
                        <option value="$PROJECT_DIR$" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="2">
          <value>
            <State>
              <option name="FILTERS">
                <map>
                  <entry key="roots">
                    <value>
                      <list>
                        <option value="$PROJECT_DIR$" />
                      </list>
                    </value>
                  </entry>
                  <entry key="text">
                    <value>
                      <list>
                        <option value="hard and tricky" />
                      </list>
                    </value>
                  </entry>
                  <entry key="user">
                    <value>
                      <list>
                        <option value="snehasishiiita" />
                      </list>
                    </value>
                  </entry>
                </map>
              </option>
            </State>
          </value>
        </entry>
        <entry key="MAIN">
          <value>
            <State>
              <option name="COLUMN_ID_WIDTH">
                <map>
                  <entry key="Table.Default.Date.ColumnIdWidth" value="119" />
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
    <option name="oldMeFiltersMigrated" value="true" />
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT" value="true" />
    <MESSAGE value="Solve easy and extremely tricky find second minimum node in a binary tree using divide and conquer in O(height). Was not able to solve this on my own in O(height)&#10;&#10;Learnings: Use divide and conquer to find the min/max element in a tree along with using it in arithmetic expressions." />
    <MESSAGE value="Solve hard and a bit tricky problem find the minimum candies to give to people such that people with high ratings should be given more candies than their neighbours using two pass greedy solution.&#10;&#10;Leveraged prior learnings of solving mountain related problem using two passes." />
    <MESSAGE value="Add hint towards using prefix sum to find a subarray that has the target xor." />
    <MESSAGE value="Add an optimized constant time solution for designing a MaxFrequencyStack by leveraging the fact that maxfrequency will be continuous" />
    <MESSAGE value="Actually add the optimized solution for designing a MaxFrequencyStack" />
    <MESSAGE value="Solve medium and a bit tricky problem, find the optimal index to place a line that intersects the least amount of bricks using greedy voting algorithm." />
    <MESSAGE value="Solve medium and a bit tricky problem, find the smallest cost to reach last row from first row in a triangle using DFS + Memoization.&#10;&#10;Learnings: I made the implementation complicated by solving it via Djikstra/Greedy instead of solving it via simple DFS + Memoization. Greedy would have been optimal in case the graph had cycles." />
    <MESSAGE value="Solve hard and extremely tricky design LFU cache using hashmap of key -&gt; node + Doubly linked list of frequency -&gt; set of nodes with the respective frequency.&#10;&#10;I was not able to fully solve this problem on my own. I was not able to cleanly implement how to find the smallest frequency and reshuffle nodes to +1 frequency node in DLL. &#10;Once I saw the paper, I was able to visualize it clearly and was able to implement it cleanly as well." />
    <MESSAGE value="Solve easy and extremely tricky to optimize space complexity, find two nodes in a BST whose value equals k using iterative BST traversal.&#10;&#10;Learnings: Iterative traversals are very tricky." />
    <MESSAGE value="Solve medium find two nodes in two BST that sums to target node using iterative traversals. Perform a inorder iterative traversal for the first tree and a reverse inorder iterative traversal for the second tree.&#10;&#10;Leveraged prior learning of doing iterative BST traversal." />
    <MESSAGE value="Solve medium balance a given BST using Divide and conquer. In order to reduce the space complexity to O(1) need to use DSW algorithm." />
    <MESSAGE value="Solve medium and extremely tricky to do in O(1) space, rotate an image clockwise 90 degrees in place by swapping the cells in group of 4's using recursion.&#10;&#10;Very happy to solve this question on my own in first attempt." />
    <MESSAGE value="Solve medium and a bit tricky problem, find the no of total hits on counters received in last 5 minutes using deque. &#10;&#10;In my initial implementation, I implemented the solution using custom binary search by writing upper_bound() and lower_bound() but the solution became simplified after knowing that the timestamps are sorted for both getHits() and hits(), so we can simply use a deque for storing elements." />
    <MESSAGE value="Solve medium and a bit tricky problem, find the kth largest element in an array using quick select algorithm.&#10;&#10;Trick was to select a random pivot between [low, high] to reduce worst case time complexity." />
    <MESSAGE value="Solve hard and extremely tricky to optimize, find whether a word with the provided suffix and prefix exists in dictionary or not using reverse indexes in trie.&#10;&#10;Trick was to generate all possible query patterns for a word and insert into trie ie. apple can be searched via &quot;apple|ap&quot;, &quot;ple|app&quot;, &quot;pple|ap&quot;. Don't forget to store useful information ie. index directly in trie node to avoid performing DFS." />
    <MESSAGE value="Solve medium find the smallest unreserved seat using treeset. &#10;&#10;Leveraged prior learning of solving seat allocation problem using ordered set." />
    <MESSAGE value="Solve medium and a bit tricky problem find min adjacent swaps required to reach kth smallest number by first finding the kth next permutation and then finding the min swaps by logic similar to insertion sort." />
    <MESSAGE value="Solve medium and extremely tricky to do in O(1) space using tricky recursion, find all the gray codes of n digits.&#10;&#10;Was able to do it on my own by maintaining a visited set and try flipping a bit." />
    <MESSAGE value="Solve medium and a bit tricky to optimize time and space complexity to O(n) and O(logn) by leveraging the inorder traversal of a sorted list to convert it to a balanced BST." />
    <MESSAGE value="Update class name to match problem statement name" />
    <MESSAGE value="Solve medium and a bit tricky problem, split the array into at most k groups such that sum of averages is maximised using recursion + memoization. &#10;&#10;Do note that the largest average would be possible by splitting into maximum groups, so the problem statement reduces to split the array into k groups such that sum of averages is maximized.&#10;&#10;Leveraged past learnings of solving similar split array problems." />
    <MESSAGE value="Solve medium find the time required to fill memory sticks by consuming i bits every ith second using simulation." />
    <MESSAGE value="Solve medium and a bit tricky problem, find the box contents after rotating a box containing stones and stationary obstacles using two pointers.&#10;&#10;Leveraged previous learnings of simulating rotation using transpose + reverse." />
    <MESSAGE value="Solve medium find whether the provided strings match the provided pattern by maintaining a mapping from source to target and from target to source.&#10;&#10;Very similar to previously solved problems." />
    <MESSAGE value="Solve medium find the minimum path sum to reach any cell of last row from any cell in the first row using recursion + memoization.&#10;&#10;Leveraged prior learnings of directly using DP as the graph does not contain any cycles." />
    <option name="LAST_COMMIT_MESSAGE" value="Solve medium find the minimum path sum to reach any cell of last row from any cell in the first row using recursion + memoization.&#10;&#10;Leveraged prior learnings of directly using DP as the graph does not contain any cycles." />
    <option name="OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT" value="true" />
    <option name="REFORMAT_BEFORE_PROJECT_COMMIT" value="true" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/SortColors.java</url>
          <line>29</line>
          <option name="timeStamp" value="2" />
        </line-breakpoint>
        <line-breakpoint type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/GeneralizedAbbreviations.java</url>
          <line>33</line>
          <option name="timeStamp" value="8" />
        </line-breakpoint>
        <breakpoint enabled="true" type="java-exception">
          <properties class="java.lang.StackOverflowError" package="java.lang" />
          <option name="timeStamp" value="9" />
        </breakpoint>
      </breakpoints>
      <default-breakpoints>
        <breakpoint type="java-exception">
          <condition expression="this instanceof StringIndexOutOfBoundsException" language="JAVA" />
          <properties>
            <catch-class-filters>
              <class-filter pattern="java.lang.ArrayIndexOutOfBoundsException" />
            </catch-class-filters>
          </properties>
        </breakpoint>
      </default-breakpoints>
    </breakpoint-manager>
    <watches-manager>
      <configuration name="JUnit">
        <watch expression="grid" />
        <watch expression="uniqueString.entrySet().toArray()[0]" />
      </configuration>
    </watches-manager>
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
</project>