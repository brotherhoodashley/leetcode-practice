1st Round:
https://www.hackerearth.com/practice/algorithms/graphs/minimum-spanning-tree/practice-problems/algorithm/3-types/
Could not solve completely, suggested to use MST

FriendGroups -- solved in 10 minutes
Say a group of people want to take UberPools to get to the same destination. But only people that are connected are willing to take the same Pool ride.
We define two people are connected if they directly know each other, or indirectly know each other.
E.g., if 0 knows 1 and 1 knows 0, 0 and 1 are connected; or if 0 and 1 know each other, 1 and 2 know each other, 0, 1, 2 are connected.

Give a list of 2-element tuple, like (0, 1), meaning 0 and 1 are connected, return the number of rides they need to call.

Eg.
7 people want to travel from A to B.
(0,1), (3,4), (2,5), (1,5), (6)
*/
public int noOfUberPools(int n, List<List<Integer>> edges) {
    List<List<Integer>> graph = buildGraph(edges);
    boolean[] visited = new boolean[n];
    int distinctComponents = 0;
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            DFS(i, visited);
            distinctComponents++;
        }
    }
    return distinctComponents;
}

private void DFS(int index, boolean[] visited, List<List<Integer>> graph) {
    visited[index] = true;
    for (int neighbour : graph.get(index)) {
        if (!visited[neighbour]) {
            DFS(neighbour, visited, graph);
        }
    }
}


JumpGame -- got confused a bit while optimizing but solved it
Given an array representing a list of freight stations. Each station is represented by a pair of integers

[package count, transfer hops]

For example [[2, 2], [7, 3], [4, 1], [1, 2], [2, 1]] means:

at station 0, there are 2 packages need to be transferred 2 hops to station 2 (0+2)
at station 1, there are 7 packages need to be transferred 3 hops to station 4 (1+3)
... and so on
          ┌----------7---------┐┌--2--┐
          |                    ||     |
   ┌------2------┐┌--4--┐┌-----1-----┐|
   |      |      ||     ||     ||    ||
---+------+------++-----++-----++----++---
   0      1      2      3      4     5
 [2,2]  [7,3]  [4,1]  [1,2]  [2,1]

dp = [0,0,0,0,0]
dp[0] = 0;
dp[1] = max (dp[0]) 0
dp[2] = max(dp[0] + 2, dp[1]) = 2
dp[3] = max(dp[0], dp[1], dp[2] + 4) = max(0,0,2+4) = 6
dp[4] = max(dp[0], dp[1] + 7, dp[2], dp[3]) = max(0,7,2,6) = 7
dp[5] = max(dp[0], dp[1], dp[2], dp[3] + 1, dp[4] + 2) = max(0,0,2,6+1,7+2) = 9

n^2
for (i = 0 to n)
for (j = 0 to i)

dp = [0,0,0,0,0]
dp[0] = 0;
dp[1] = max (dp[0]) 0
dp[2] = max(dp[0] + 2, dp[1]) = 2
dp[3] = max(dp[0], dp[1], dp[2] + 4) = max(0,0,2+4) = 6
dp[4] = max(dp[0], dp[1] + 7, dp[2], dp[3]) = max(0,7,2,6) = 7
dp[5] = max(dp[0], dp[1], dp[2], dp[3] + 1, dp[4] + 2) = max(0,0,2,6+1,7+2) = 9


Constraints
1.You either pick up all packages at a station or nothing, there is no partial pick up
2.Once you pickup the packages, you have to deliver through the hops. You cannot pickup anything else until the delivery.
3.Once you unloaded your packages, you can choose to pickup new packages at the station, or move to the next station directly.
4.You cannot go backward.
5.The terminal station (the last one) is not in the station list, but it will be at most 1 hop away from the second to the last station.
6.Write a function to return the maximum total packages you can transfer by driving from station 0 to N.

