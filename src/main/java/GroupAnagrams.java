import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

/**
 * https://leetcode.com/problems/group-anagrams/
 * <p>
 * Given an array of strings, group anagrams together.
 * <p>
 * Example:
 * <p>
 * Input: ["eat", "tea", "tan", "ate", "nat", "bat"],
 * Output:
 * <pre>
 * [
 *   ["ate","eat","tea"],
 *   ["nat","tan"],
 *   ["bat"]
 * ]
 * </pre>
 */
public class GroupAnagrams {
    public List<List<String>> groupAnagrams(String[] strs) {
        //Instead of sorting the string, unique identifier can be generated by tallying up the count of each characters
        // abbccc can be translated into {#1#2#3#0#0#0....#0} or via Arrays.toString()
        HashMap<String, List<String>> mapping = new HashMap<>();
        for (String input : strs) {
            String key = getCount(input);
            if (!mapping.containsKey(key)) {
                mapping.put(key, new ArrayList<>());
            }
            List<String> list = mapping.get(key);
            list.add(input);
        }
        return new ArrayList<>(mapping.values());
    }

    private String getCount(String input) {
        int[] cnt = new int[26];
        for (int i = 0; i < input.length(); i++) {
            char ch = input.charAt(i);
            cnt[ch - 'a']++;
        }
        return Arrays.toString(cnt);
    }

    public List<List<String>> groupAnagramsBySorting(String[] strs) {
        //Sort the input string and use the sorted string as the key in hashmap, values being the original input
        HashMap<String, List<String>> uniqueString = new HashMap<>();
        for (String input : strs) {
            char[] inputChar = input.toCharArray();
            Arrays.sort(inputChar);
            String sortedInput = new String(inputChar);
            List<String> list = uniqueString.getOrDefault(sortedInput, new ArrayList<>());
            list.add(input);
            uniqueString.put(sortedInput, list);
        }
        return new ArrayList<>(uniqueString.values());
    }
}
